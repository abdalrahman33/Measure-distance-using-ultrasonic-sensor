
MiniProject4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00003294  00003328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080018c  0080018c  00003454  2**0
                  ALLOC
  3 .stab         00002dd8  00000000  00000000  00003454  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001421  00000000  00000000  0000622c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000764d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000077ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000079df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c348  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c508  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c7fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d16c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 20 17 	call	0x2e40	; 0x2e40 <main>
      8a:	0c 94 48 19 	jmp	0x3290	; 0x3290 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e8       	ldi	r26, 0x84	; 132
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e8       	ldi	r22, 0x84	; 132
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e4 57       	subi	r30, 0x74	; 116
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     e58:	80 91 8c 01 	lds	r24, 0x018C
     e5c:	90 91 8d 01 	lds	r25, 0x018D
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e64:	e0 91 8c 01 	lds	r30, 0x018C
     e68:	f0 91 8d 01 	lds	r31, 0x018D
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <ICU_init+0x6>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
     ea2:	a1 e3       	ldi	r26, 0x31	; 49
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e1 e3       	ldi	r30, 0x31	; 49
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 7b       	andi	r24, 0xBF	; 191
     eae:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     eb0:	ef e4       	ldi	r30, 0x4F	; 79
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	8c e0       	ldi	r24, 0x0C	; 12
     eb6:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
     eb8:	ae e4       	ldi	r26, 0x4E	; 78
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ee e4       	ldi	r30, 0x4E	; 78
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	98 2f       	mov	r25, r24
     ec4:	98 7f       	andi	r25, 0xF8	; 248
     ec6:	e9 81       	ldd	r30, Y+1	; 0x01
     ec8:	fa 81       	ldd	r31, Y+2	; 0x02
     eca:	80 81       	ld	r24, Z
     ecc:	89 2b       	or	r24, r25
     ece:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
     ed0:	ae e4       	ldi	r26, 0x4E	; 78
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ee e4       	ldi	r30, 0x4E	; 78
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	28 2f       	mov	r18, r24
     edc:	2f 7b       	andi	r18, 0xBF	; 191
     ede:	e9 81       	ldd	r30, Y+1	; 0x01
     ee0:	fa 81       	ldd	r31, Y+2	; 0x02
     ee2:	81 81       	ldd	r24, Z+1	; 0x01
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	00 24       	eor	r0, r0
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	07 94       	ror	r0
     ef0:	96 95       	lsr	r25
     ef2:	87 95       	ror	r24
     ef4:	07 94       	ror	r0
     ef6:	98 2f       	mov	r25, r24
     ef8:	80 2d       	mov	r24, r0
     efa:	82 2b       	or	r24, r18
     efc:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
     efe:	ec e4       	ldi	r30, 0x4C	; 76
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	11 82       	std	Z+1, r1	; 0x01
     f04:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
     f06:	e6 e4       	ldi	r30, 0x46	; 70
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	11 82       	std	Z+1, r1	; 0x01
     f0c:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
     f0e:	a9 e5       	ldi	r26, 0x59	; 89
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e9 e5       	ldi	r30, 0x59	; 89
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 62       	ori	r24, 0x20	; 32
     f1a:	8c 93       	st	X, r24
}
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <ICU_setCallBack+0x6>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	90 93 8d 01 	sts	0x018D, r25
     f3c:	80 93 8c 01 	sts	0x018C, r24
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
     f56:	ae e4       	ldi	r26, 0x4E	; 78
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ee e4       	ldi	r30, 0x4E	; 78
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	28 2f       	mov	r18, r24
     f62:	2f 7b       	andi	r18, 0xBF	; 191
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	00 24       	eor	r0, r0
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	07 94       	ror	r0
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	07 94       	ror	r0
     f78:	98 2f       	mov	r25, r24
     f7a:	80 2d       	mov	r24, r0
     f7c:	82 2b       	or	r24, r18
     f7e:	8c 93       	st	X, r24
}
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     f90:	e6 e4       	ldi	r30, 0x46	; 70
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
}
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     fa6:	ec e4       	ldi	r30, 0x4C	; 76
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	11 82       	std	Z+1, r1	; 0x01
     fac:	10 82       	st	Z, r1
}
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
     fbc:	ef e4       	ldi	r30, 0x4F	; 79
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	10 82       	st	Z, r1
	TCCR1B = 0;
     fc2:	ee e4       	ldi	r30, 0x4E	; 78
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	10 82       	st	Z, r1
	TCNT1 = 0;
     fc8:	ec e4       	ldi	r30, 0x4C	; 76
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	11 82       	std	Z+1, r1	; 0x01
     fce:	10 82       	st	Z, r1
	ICR1 = 0;
     fd0:	e6 e4       	ldi	r30, 0x46	; 70
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	11 82       	std	Z+1, r1	; 0x01
     fd6:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
     fd8:	a9 e5       	ldi	r26, 0x59	; 89
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e9 e5       	ldi	r30, 0x59	; 89
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	8f 7d       	andi	r24, 0xDF	; 223
     fe4:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
     fe6:	10 92 8d 01 	sts	0x018D, r1
     fea:	10 92 8c 01 	sts	0x018C, r1
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <GPIO_setupPinDirection+0x6>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <GPIO_setupPinDirection+0x8>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	6a 83       	std	Y+2, r22	; 0x02
    1006:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	88 30       	cpi	r24, 0x08	; 8
    100c:	08 f0       	brcs	.+2      	; 0x1010 <GPIO_setupPinDirection+0x1c>
    100e:	d5 c0       	rjmp	.+426    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	08 f0       	brcs	.+2      	; 0x1018 <GPIO_setupPinDirection+0x24>
    1016:	d1 c0       	rjmp	.+418    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <GPIO_setupPinDirection+0x3a>
    102c:	43 c0       	rjmp	.+134    	; 0x10b4 <GPIO_setupPinDirection+0xc0>
    102e:	2c 81       	ldd	r18, Y+4	; 0x04
    1030:	3d 81       	ldd	r19, Y+5	; 0x05
    1032:	22 30       	cpi	r18, 0x02	; 2
    1034:	31 05       	cpc	r19, r1
    1036:	2c f4       	brge	.+10     	; 0x1042 <GPIO_setupPinDirection+0x4e>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	71 f0       	breq	.+28     	; 0x105c <GPIO_setupPinDirection+0x68>
    1040:	bc c0       	rjmp	.+376    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	3d 81       	ldd	r19, Y+5	; 0x05
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <GPIO_setupPinDirection+0x5a>
    104c:	5f c0       	rjmp	.+190    	; 0x110c <GPIO_setupPinDirection+0x118>
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	91 05       	cpc	r25, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <GPIO_setupPinDirection+0x66>
    1058:	85 c0       	rjmp	.+266    	; 0x1164 <GPIO_setupPinDirection+0x170>
    105a:	af c0       	rjmp	.+350    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	a1 f4       	brne	.+40     	; 0x108a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1062:	aa e3       	ldi	r26, 0x3A	; 58
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ea e3       	ldi	r30, 0x3A	; 58
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <GPIO_setupPinDirection+0x8c>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <GPIO_setupPinDirection+0x88>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	98 c0       	rjmp	.+304    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    108a:	aa e3       	ldi	r26, 0x3A	; 58
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ea e3       	ldi	r30, 0x3A	; 58
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_setupPinDirection+0xb4>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_setupPinDirection+0xb0>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	83 c0       	rjmp	.+262    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	a1 f4       	brne	.+40     	; 0x10e2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10ba:	a7 e3       	ldi	r26, 0x37	; 55
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e7 e3       	ldi	r30, 0x37	; 55
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_setupPinDirection+0xe4>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_setupPinDirection+0xe0>
    10dc:	84 2b       	or	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	6c c0       	rjmp	.+216    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10e2:	a7 e3       	ldi	r26, 0x37	; 55
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e3       	ldi	r30, 0x37	; 55
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_setupPinDirection+0x10c>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_setupPinDirection+0x108>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	57 c0       	rjmp	.+174    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	a1 f4       	brne	.+40     	; 0x113a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1112:	a4 e3       	ldi	r26, 0x34	; 52
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e4 e3       	ldi	r30, 0x34	; 52
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <GPIO_setupPinDirection+0x13c>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <GPIO_setupPinDirection+0x138>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	40 c0       	rjmp	.+128    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    113a:	a4 e3       	ldi	r26, 0x34	; 52
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e4 e3       	ldi	r30, 0x34	; 52
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_setupPinDirection+0x164>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_setupPinDirection+0x160>
    115c:	80 95       	com	r24
    115e:	84 23       	and	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	2b c0       	rjmp	.+86     	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	a1 f4       	brne	.+40     	; 0x1192 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    116a:	a1 e3       	ldi	r26, 0x31	; 49
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e1 e3       	ldi	r30, 0x31	; 49
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <GPIO_setupPinDirection+0x194>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <GPIO_setupPinDirection+0x190>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1192:	a1 e3       	ldi	r26, 0x31	; 49
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e1 e3       	ldi	r30, 0x31	; 49
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_setupPinDirection+0x1bc>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <GPIO_setupPinDirection+0x1b8>
    11b4:	80 95       	com	r24
    11b6:	84 23       	and	r24, r20
    11b8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <GPIO_writePin+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <GPIO_writePin+0x8>
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	6a 83       	std	Y+2, r22	; 0x02
    11dc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	88 30       	cpi	r24, 0x08	; 8
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <GPIO_writePin+0x1c>
    11e4:	d5 c0       	rjmp	.+426    	; 0x1390 <GPIO_writePin+0x1c6>
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	84 30       	cpi	r24, 0x04	; 4
    11ea:	08 f0       	brcs	.+2      	; 0x11ee <GPIO_writePin+0x24>
    11ec:	d1 c0       	rjmp	.+418    	; 0x1390 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3d 83       	std	Y+5, r19	; 0x05
    11f6:	2c 83       	std	Y+4, r18	; 0x04
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <GPIO_writePin+0x3a>
    1202:	43 c0       	rjmp	.+134    	; 0x128a <GPIO_writePin+0xc0>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	2c f4       	brge	.+10     	; 0x1218 <GPIO_writePin+0x4e>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	71 f0       	breq	.+28     	; 0x1232 <GPIO_writePin+0x68>
    1216:	bc c0       	rjmp	.+376    	; 0x1390 <GPIO_writePin+0x1c6>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <GPIO_writePin+0x5a>
    1222:	5f c0       	rjmp	.+190    	; 0x12e2 <GPIO_writePin+0x118>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	83 30       	cpi	r24, 0x03	; 3
    122a:	91 05       	cpc	r25, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <GPIO_writePin+0x66>
    122e:	85 c0       	rjmp	.+266    	; 0x133a <GPIO_writePin+0x170>
    1230:	af c0       	rjmp	.+350    	; 0x1390 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	a1 f4       	brne	.+40     	; 0x1260 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1238:	ab e3       	ldi	r26, 0x3B	; 59
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	eb e3       	ldi	r30, 0x3B	; 59
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_writePin+0x8c>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_writePin+0x88>
    125a:	84 2b       	or	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	98 c0       	rjmp	.+304    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1260:	ab e3       	ldi	r26, 0x3B	; 59
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	eb e3       	ldi	r30, 0x3B	; 59
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <GPIO_writePin+0xb4>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <GPIO_writePin+0xb0>
    1282:	80 95       	com	r24
    1284:	84 23       	and	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	83 c0       	rjmp	.+262    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	a1 f4       	brne	.+40     	; 0x12b8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1290:	a8 e3       	ldi	r26, 0x38	; 56
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e8 e3       	ldi	r30, 0x38	; 56
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <GPIO_writePin+0xe4>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <GPIO_writePin+0xe0>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	6c c0       	rjmp	.+216    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12b8:	a8 e3       	ldi	r26, 0x38	; 56
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e8 e3       	ldi	r30, 0x38	; 56
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <GPIO_writePin+0x10c>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <GPIO_writePin+0x108>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	57 c0       	rjmp	.+174    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	a1 f4       	brne	.+40     	; 0x1310 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12e8:	a5 e3       	ldi	r26, 0x35	; 53
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e5 e3       	ldi	r30, 0x35	; 53
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <GPIO_writePin+0x13c>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <GPIO_writePin+0x138>
    130a:	84 2b       	or	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	40 c0       	rjmp	.+128    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1310:	a5 e3       	ldi	r26, 0x35	; 53
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e3       	ldi	r30, 0x35	; 53
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <GPIO_writePin+0x164>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <GPIO_writePin+0x160>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	2b c0       	rjmp	.+86     	; 0x1390 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	a1 f4       	brne	.+40     	; 0x1368 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1340:	a2 e3       	ldi	r26, 0x32	; 50
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e2 e3       	ldi	r30, 0x32	; 50
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <GPIO_writePin+0x194>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <GPIO_writePin+0x190>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1368:	a2 e3       	ldi	r26, 0x32	; 50
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <GPIO_writePin+0x1bc>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <GPIO_writePin+0x1b8>
    138a:	80 95       	com	r24
    138c:	84 23       	and	r24, r20
    138e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <GPIO_readPin+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <GPIO_readPin+0x8>
    13a8:	0f 92       	push	r0
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	8a 83       	std	Y+2, r24	; 0x02
    13b0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13b2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 30       	cpi	r24, 0x08	; 8
    13b8:	08 f0       	brcs	.+2      	; 0x13bc <GPIO_readPin+0x1c>
    13ba:	84 c0       	rjmp	.+264    	; 0x14c4 <GPIO_readPin+0x124>
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	84 30       	cpi	r24, 0x04	; 4
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <GPIO_readPin+0x24>
    13c2:	80 c0       	rjmp	.+256    	; 0x14c4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3d 83       	std	Y+5, r19	; 0x05
    13cc:	2c 83       	std	Y+4, r18	; 0x04
    13ce:	4c 81       	ldd	r20, Y+4	; 0x04
    13d0:	5d 81       	ldd	r21, Y+5	; 0x05
    13d2:	41 30       	cpi	r20, 0x01	; 1
    13d4:	51 05       	cpc	r21, r1
    13d6:	79 f1       	breq	.+94     	; 0x1436 <GPIO_readPin+0x96>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	82 30       	cpi	r24, 0x02	; 2
    13de:	91 05       	cpc	r25, r1
    13e0:	34 f4       	brge	.+12     	; 0x13ee <GPIO_readPin+0x4e>
    13e2:	2c 81       	ldd	r18, Y+4	; 0x04
    13e4:	3d 81       	ldd	r19, Y+5	; 0x05
    13e6:	21 15       	cp	r18, r1
    13e8:	31 05       	cpc	r19, r1
    13ea:	69 f0       	breq	.+26     	; 0x1406 <GPIO_readPin+0x66>
    13ec:	6b c0       	rjmp	.+214    	; 0x14c4 <GPIO_readPin+0x124>
    13ee:	4c 81       	ldd	r20, Y+4	; 0x04
    13f0:	5d 81       	ldd	r21, Y+5	; 0x05
    13f2:	42 30       	cpi	r20, 0x02	; 2
    13f4:	51 05       	cpc	r21, r1
    13f6:	b9 f1       	breq	.+110    	; 0x1466 <GPIO_readPin+0xc6>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	91 05       	cpc	r25, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <GPIO_readPin+0x64>
    1402:	49 c0       	rjmp	.+146    	; 0x1496 <GPIO_readPin+0xf6>
    1404:	5f c0       	rjmp	.+190    	; 0x14c4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1406:	e9 e3       	ldi	r30, 0x39	; 57
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <GPIO_readPin+0x7e>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <GPIO_readPin+0x7a>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	90 70       	andi	r25, 0x00	; 0
    1428:	88 23       	and	r24, r24
    142a:	19 f0       	breq	.+6      	; 0x1432 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	49 c0       	rjmp	.+146    	; 0x14c4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1432:	19 82       	std	Y+1, r1	; 0x01
    1434:	47 c0       	rjmp	.+142    	; 0x14c4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1436:	e6 e3       	ldi	r30, 0x36	; 54
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a9 01       	movw	r20, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <GPIO_readPin+0xae>
    144a:	55 95       	asr	r21
    144c:	47 95       	ror	r20
    144e:	8a 95       	dec	r24
    1450:	e2 f7       	brpl	.-8      	; 0x144a <GPIO_readPin+0xaa>
    1452:	ca 01       	movw	r24, r20
    1454:	81 70       	andi	r24, 0x01	; 1
    1456:	90 70       	andi	r25, 0x00	; 0
    1458:	88 23       	and	r24, r24
    145a:	19 f0       	breq	.+6      	; 0x1462 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	31 c0       	rjmp	.+98     	; 0x14c4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1462:	19 82       	std	Y+1, r1	; 0x01
    1464:	2f c0       	rjmp	.+94     	; 0x14c4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1466:	e3 e3       	ldi	r30, 0x33	; 51
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a9 01       	movw	r20, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <GPIO_readPin+0xde>
    147a:	55 95       	asr	r21
    147c:	47 95       	ror	r20
    147e:	8a 95       	dec	r24
    1480:	e2 f7       	brpl	.-8      	; 0x147a <GPIO_readPin+0xda>
    1482:	ca 01       	movw	r24, r20
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	90 70       	andi	r25, 0x00	; 0
    1488:	88 23       	and	r24, r24
    148a:	19 f0       	breq	.+6      	; 0x1492 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	19 c0       	rjmp	.+50     	; 0x14c4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1492:	19 82       	std	Y+1, r1	; 0x01
    1494:	17 c0       	rjmp	.+46     	; 0x14c4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1496:	e0 e3       	ldi	r30, 0x30	; 48
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	88 2f       	mov	r24, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a9 01       	movw	r20, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <GPIO_readPin+0x10e>
    14aa:	55 95       	asr	r21
    14ac:	47 95       	ror	r20
    14ae:	8a 95       	dec	r24
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <GPIO_readPin+0x10a>
    14b2:	ca 01       	movw	r24, r20
    14b4:	81 70       	andi	r24, 0x01	; 1
    14b6:	90 70       	andi	r25, 0x00	; 0
    14b8:	88 23       	and	r24, r24
    14ba:	19 f0       	breq	.+6      	; 0x14c2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14c2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <GPIO_setupPortDirection+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <GPIO_setupPortDirection+0x8>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	84 30       	cpi	r24, 0x04	; 4
    14ea:	90 f5       	brcc	.+100    	; 0x1550 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3c 83       	std	Y+4, r19	; 0x04
    14f4:	2b 83       	std	Y+3, r18	; 0x03
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	d1 f0       	breq	.+52     	; 0x1534 <GPIO_setupPortDirection+0x5e>
    1500:	2b 81       	ldd	r18, Y+3	; 0x03
    1502:	3c 81       	ldd	r19, Y+4	; 0x04
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	2c f4       	brge	.+10     	; 0x1514 <GPIO_setupPortDirection+0x3e>
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	61 f0       	breq	.+24     	; 0x152a <GPIO_setupPortDirection+0x54>
    1512:	1e c0       	rjmp	.+60     	; 0x1550 <GPIO_setupPortDirection+0x7a>
    1514:	2b 81       	ldd	r18, Y+3	; 0x03
    1516:	3c 81       	ldd	r19, Y+4	; 0x04
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	81 f0       	breq	.+32     	; 0x153e <GPIO_setupPortDirection+0x68>
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <GPIO_setupPortDirection+0x72>
    1528:	13 c0       	rjmp	.+38     	; 0x1550 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    152a:	ea e3       	ldi	r30, 0x3A	; 58
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	80 83       	st	Z, r24
    1532:	0e c0       	rjmp	.+28     	; 0x1550 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1534:	e7 e3       	ldi	r30, 0x37	; 55
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	80 83       	st	Z, r24
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    153e:	e4 e3       	ldi	r30, 0x34	; 52
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	80 83       	st	Z, r24
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1548:	e1 e3       	ldi	r30, 0x31	; 49
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <GPIO_writePort+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <GPIO_writePort+0x8>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	84 30       	cpi	r24, 0x04	; 4
    1572:	90 f5       	brcc	.+100    	; 0x15d8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3c 83       	std	Y+4, r19	; 0x04
    157c:	2b 83       	std	Y+3, r18	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	d1 f0       	breq	.+52     	; 0x15bc <GPIO_writePort+0x5e>
    1588:	2b 81       	ldd	r18, Y+3	; 0x03
    158a:	3c 81       	ldd	r19, Y+4	; 0x04
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	2c f4       	brge	.+10     	; 0x159c <GPIO_writePort+0x3e>
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	61 f0       	breq	.+24     	; 0x15b2 <GPIO_writePort+0x54>
    159a:	1e c0       	rjmp	.+60     	; 0x15d8 <GPIO_writePort+0x7a>
    159c:	2b 81       	ldd	r18, Y+3	; 0x03
    159e:	3c 81       	ldd	r19, Y+4	; 0x04
    15a0:	22 30       	cpi	r18, 0x02	; 2
    15a2:	31 05       	cpc	r19, r1
    15a4:	81 f0       	breq	.+32     	; 0x15c6 <GPIO_writePort+0x68>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	91 05       	cpc	r25, r1
    15ae:	81 f0       	breq	.+32     	; 0x15d0 <GPIO_writePort+0x72>
    15b0:	13 c0       	rjmp	.+38     	; 0x15d8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15b2:	eb e3       	ldi	r30, 0x3B	; 59
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	80 83       	st	Z, r24
    15ba:	0e c0       	rjmp	.+28     	; 0x15d8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15bc:	e8 e3       	ldi	r30, 0x38	; 56
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	80 83       	st	Z, r24
    15c4:	09 c0       	rjmp	.+18     	; 0x15d8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15c6:	e5 e3       	ldi	r30, 0x35	; 53
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	80 83       	st	Z, r24
    15ce:	04 c0       	rjmp	.+8      	; 0x15d8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15d0:	e2 e3       	ldi	r30, 0x32	; 50
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	80 83       	st	Z, r24
			break;
		}
	}
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <GPIO_readPort+0x6>
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <GPIO_readPort+0x8>
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15f4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	84 30       	cpi	r24, 0x04	; 4
    15fa:	90 f5       	brcc	.+100    	; 0x1660 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3c 83       	std	Y+4, r19	; 0x04
    1604:	2b 83       	std	Y+3, r18	; 0x03
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	91 05       	cpc	r25, r1
    160e:	d1 f0       	breq	.+52     	; 0x1644 <GPIO_readPort+0x5e>
    1610:	2b 81       	ldd	r18, Y+3	; 0x03
    1612:	3c 81       	ldd	r19, Y+4	; 0x04
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	2c f4       	brge	.+10     	; 0x1624 <GPIO_readPort+0x3e>
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	61 f0       	breq	.+24     	; 0x163a <GPIO_readPort+0x54>
    1622:	1e c0       	rjmp	.+60     	; 0x1660 <GPIO_readPort+0x7a>
    1624:	2b 81       	ldd	r18, Y+3	; 0x03
    1626:	3c 81       	ldd	r19, Y+4	; 0x04
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	81 f0       	breq	.+32     	; 0x164e <GPIO_readPort+0x68>
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	91 05       	cpc	r25, r1
    1636:	81 f0       	breq	.+32     	; 0x1658 <GPIO_readPort+0x72>
    1638:	13 c0       	rjmp	.+38     	; 0x1660 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    163a:	e9 e3       	ldi	r30, 0x39	; 57
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	0e c0       	rjmp	.+28     	; 0x1660 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1644:	e6 e3       	ldi	r30, 0x36	; 54
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	09 c0       	rjmp	.+18     	; 0x1660 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    164e:	e3 e3       	ldi	r30, 0x33	; 51
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	04 c0       	rjmp	.+8      	; 0x1660 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1658:	e0 e3       	ldi	r30, 0x30	; 48
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1660:	89 81       	ldd	r24, Y+1	; 0x01
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <Ultrasonic_init>:
uint16 Timer_Value = 0;
uint16 distance = 0;

/* This is the initialization function */
void Ultrasonic_init(void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <Ultrasonic_init+0x6>
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);
    167a:	af e5       	ldi	r26, 0x5F	; 95
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ef e5       	ldi	r30, 0x5F	; 95
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 68       	ori	r24, 0x80	; 128
    1686:	8c 93       	st	X, r24
	ICU_ConfigType ICU_Configurations = {F_CPU_8, RAISING};
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	8a 83       	std	Y+2, r24	; 0x02
	ICU_init(&ICU_Configurations);
    1690:	ce 01       	movw	r24, r28
    1692:	01 96       	adiw	r24, 0x01	; 1
    1694:	0e 94 4a 07 	call	0xe94	; 0xe94 <ICU_init>
	ICU_setCallBack(ULTRASONIC_edgeProcessing);
    1698:	8e ee       	ldi	r24, 0xEE	; 238
    169a:	9b e0       	ldi	r25, 0x0B	; 11
    169c:	0e 94 93 07 	call	0xf26	; 0xf26 <ICU_setCallBack>
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, PIN_OUTPUT);
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	67 e0       	ldi	r22, 0x07	; 7
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, LOGIC_LOW);
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	67 e0       	ldi	r22, 0x07	; 7
    16ae:	40 e0       	ldi	r20, 0x00	; 0
    16b0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <Ultrasonic_Trigger>:

/*This is the trigger function */
void Ultrasonic_Trigger(void)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	2e 97       	sbiw	r28, 0x0e	; 14
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, LOGIC_HIGH);
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	67 e0       	ldi	r22, 0x07	; 7
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a0 e8       	ldi	r26, 0x80	; 128
    16e2:	bf e3       	ldi	r27, 0x3F	; 63
    16e4:	8b 87       	std	Y+11, r24	; 0x0b
    16e6:	9c 87       	std	Y+12, r25	; 0x0c
    16e8:	ad 87       	std	Y+13, r26	; 0x0d
    16ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	4a e7       	ldi	r20, 0x7A	; 122
    16fa:	55 e4       	ldi	r21, 0x45	; 69
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	8f 83       	std	Y+7, r24	; 0x07
    1706:	98 87       	std	Y+8, r25	; 0x08
    1708:	a9 87       	std	Y+9, r26	; 0x09
    170a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    170c:	6f 81       	ldd	r22, Y+7	; 0x07
    170e:	78 85       	ldd	r23, Y+8	; 0x08
    1710:	89 85       	ldd	r24, Y+9	; 0x09
    1712:	9a 85       	ldd	r25, Y+10	; 0x0a
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e8       	ldi	r20, 0x80	; 128
    171a:	5f e3       	ldi	r21, 0x3F	; 63
    171c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1720:	88 23       	and	r24, r24
    1722:	2c f4       	brge	.+10     	; 0x172e <Ultrasonic_Trigger+0x70>
		__ticks = 1;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	9e 83       	std	Y+6, r25	; 0x06
    172a:	8d 83       	std	Y+5, r24	; 0x05
    172c:	3f c0       	rjmp	.+126    	; 0x17ac <Ultrasonic_Trigger+0xee>
	else if (__tmp > 65535)
    172e:	6f 81       	ldd	r22, Y+7	; 0x07
    1730:	78 85       	ldd	r23, Y+8	; 0x08
    1732:	89 85       	ldd	r24, Y+9	; 0x09
    1734:	9a 85       	ldd	r25, Y+10	; 0x0a
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	3f ef       	ldi	r19, 0xFF	; 255
    173a:	4f e7       	ldi	r20, 0x7F	; 127
    173c:	57 e4       	ldi	r21, 0x47	; 71
    173e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1742:	18 16       	cp	r1, r24
    1744:	4c f5       	brge	.+82     	; 0x1798 <Ultrasonic_Trigger+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1746:	6b 85       	ldd	r22, Y+11	; 0x0b
    1748:	7c 85       	ldd	r23, Y+12	; 0x0c
    174a:	8d 85       	ldd	r24, Y+13	; 0x0d
    174c:	9e 85       	ldd	r25, Y+14	; 0x0e
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	51 e4       	ldi	r21, 0x41	; 65
    1756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	0f c0       	rjmp	.+30     	; 0x178e <Ultrasonic_Trigger+0xd0>
    1770:	80 e9       	ldi	r24, 0x90	; 144
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	9c 83       	std	Y+4, r25	; 0x04
    1776:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <Ultrasonic_Trigger+0xbe>
    1780:	9c 83       	std	Y+4, r25	; 0x04
    1782:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	9e 81       	ldd	r25, Y+6	; 0x06
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	69 f7       	brne	.-38     	; 0x1770 <Ultrasonic_Trigger+0xb2>
    1796:	14 c0       	rjmp	.+40     	; 0x17c0 <Ultrasonic_Trigger+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1798:	6f 81       	ldd	r22, Y+7	; 0x07
    179a:	78 85       	ldd	r23, Y+8	; 0x08
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <Ultrasonic_Trigger+0xfa>
    17bc:	9a 83       	std	Y+2, r25	; 0x02
    17be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, LOGIC_LOW);
    17c0:	83 e0       	ldi	r24, 0x03	; 3
    17c2:	67 e0       	ldi	r22, 0x07	; 7
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    17ca:	2e 96       	adiw	r28, 0x0e	; 14
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <ULTRASONIC_edgeProcessing>:


/* This is the call-back function */
void ULTRASONIC_edgeProcessing(void)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
	edgeCount++;
    17e4:	80 91 8e 01 	lds	r24, 0x018E
    17e8:	8f 5f       	subi	r24, 0xFF	; 255
    17ea:	80 93 8e 01 	sts	0x018E, r24
	if(edgeCount == 1)
    17ee:	80 91 8e 01 	lds	r24, 0x018E
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	31 f4       	brne	.+12     	; 0x1802 <ULTRASONIC_edgeProcessing+0x26>
	{
		ICU_clearTimerValue();
    17f6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(FALLING);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	0e 94 a5 07 	call	0xf4a	; 0xf4a <ICU_setEdgeDetectionType>
    1800:	0f c0       	rjmp	.+30     	; 0x1820 <ULTRASONIC_edgeProcessing+0x44>
	}

	else if(edgeCount == 2)
    1802:	80 91 8e 01 	lds	r24, 0x018E
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	59 f4       	brne	.+22     	; 0x1820 <ULTRASONIC_edgeProcessing+0x44>
	{

		Timer_Value = ICU_getInputCaptureValue();
    180a:	0e 94 c4 07 	call	0xf88	; 0xf88 <ICU_getInputCaptureValue>
    180e:	90 93 90 01 	sts	0x0190, r25
    1812:	80 93 8f 01 	sts	0x018F, r24

		ICU_setEdgeDetectionType(RAISING);
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	0e 94 a5 07 	call	0xf4a	; 0xf4a <ICU_setEdgeDetectionType>
		edgeCount = 0;
    181c:	10 92 8e 01 	sts	0x018E, r1
	}

}
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance(void)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62

	Ultrasonic_Trigger();
    182e:	0e 94 5f 0b 	call	0x16be	; 0x16be <Ultrasonic_Trigger>
	distance = (Timer_Value / 117.6)+2;
    1832:	80 91 8f 01 	lds	r24, 0x018F
    1836:	90 91 90 01 	lds	r25, 0x0190
    183a:	cc 01       	movw	r24, r24
    183c:	a0 e0       	ldi	r26, 0x00	; 0
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	bc 01       	movw	r22, r24
    1842:	cd 01       	movw	r24, r26
    1844:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	23 e3       	ldi	r18, 0x33	; 51
    1852:	33 e3       	ldi	r19, 0x33	; 51
    1854:	4b ee       	ldi	r20, 0xEB	; 235
    1856:	52 e4       	ldi	r21, 0x42	; 66
    1858:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	50 e4       	ldi	r21, 0x40	; 64
    186c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	90 93 92 01 	sts	0x0192, r25
    1884:	80 93 91 01 	sts	0x0191, r24

	return distance;
    1888:	80 91 91 01 	lds	r24, 0x0191
    188c:	90 91 92 01 	lds	r25, 0x0192
}
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <LEDS_init>:
 *      Author: Abdelrahman
 */
#include "led.h"

void LEDS_init(void)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Red_Led_Port, Red_Led_Pin, PIN_OUTPUT);
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Green_Led_Port, Green_Led_Pin, PIN_OUTPUT);
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Blue_Led_Port, Blue_Led_Pin, PIN_OUTPUT);
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	62 e0       	ldi	r22, 0x02	; 2
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
}
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <LED_ON>:


void LED_ON(uint8 LED_ID)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	0f 92       	push	r0
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	89 83       	std	Y+1, r24	; 0x01
#if (LOGIC == POSTIVE_LOGIC)
	if(LED_ID == red)
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	88 23       	and	r24, r24
    18d2:	31 f4       	brne	.+12     	; 0x18e0 <LED_ON+0x1e>
	{
		GPIO_writePin(Red_Led_Port, Red_Led_Pin, LOGIC_HIGH);
    18d4:	82 e0       	ldi	r24, 0x02	; 2
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    18de:	0e c0       	rjmp	.+28     	; 0x18fc <LED_ON+0x3a>
	}
	else if(LED_ID == green)
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	31 f4       	brne	.+12     	; 0x18f2 <LED_ON+0x30>
	{
		GPIO_writePin(Green_Led_Port, Green_Led_Pin, LOGIC_HIGH);
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	41 e0       	ldi	r20, 0x01	; 1
    18ec:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    18f0:	05 c0       	rjmp	.+10     	; 0x18fc <LED_ON+0x3a>
	}
	else
	{
		GPIO_writePin(Blue_Led_Port, Blue_Led_Pin, LOGIC_HIGH);
    18f2:	82 e0       	ldi	r24, 0x02	; 2
    18f4:	62 e0       	ldi	r22, 0x02	; 2
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	else
	{
		GPIO_writePin(Blue_Led_Port, Blue_Led_Pin, LOGIC_LOW);
	}
#endif
}
    18fc:	0f 90       	pop	r0
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <LED_OFF>:


void LED_OFF(uint8 LED_ID)
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	0f 92       	push	r0
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	89 83       	std	Y+1, r24	; 0x01
#if (LOGIC == POSTIVE_LOGIC)
	if(LED_ID == red)
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	88 23       	and	r24, r24
    1914:	31 f4       	brne	.+12     	; 0x1922 <LED_OFF+0x1e>
	{
		GPIO_writePin(Red_Led_Port, Red_Led_Pin, LOGIC_LOW);
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1920:	0e c0       	rjmp	.+28     	; 0x193e <LED_OFF+0x3a>
	}
	else if(LED_ID == green)
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	31 f4       	brne	.+12     	; 0x1934 <LED_OFF+0x30>
	{
		GPIO_writePin(Green_Led_Port, Green_Led_Pin, LOGIC_LOW);
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1932:	05 c0       	rjmp	.+10     	; 0x193e <LED_OFF+0x3a>
	}
	else
	{
		GPIO_writePin(Blue_Led_Port, Blue_Led_Pin, LOGIC_LOW);
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	62 e0       	ldi	r22, 0x02	; 2
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	{
		GPIO_writePin(Blue_Led_Port, Blue_Led_Pin, LOGIC_HIGH);
	}
#endif

}
    193e:	0f 90       	pop	r0
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	2e 97       	sbiw	r28, 0x0e	; 14
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	41 e0       	ldi	r20, 0x01	; 1
    1960:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	62 e0       	ldi	r22, 0x02	; 2
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a0 ea       	ldi	r26, 0xA0	; 160
    1974:	b1 e4       	ldi	r27, 0x41	; 65
    1976:	8b 87       	std	Y+11, r24	; 0x0b
    1978:	9c 87       	std	Y+12, r25	; 0x0c
    197a:	ad 87       	std	Y+13, r26	; 0x0d
    197c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1980:	7c 85       	ldd	r23, Y+12	; 0x0c
    1982:	8d 85       	ldd	r24, Y+13	; 0x0d
    1984:	9e 85       	ldd	r25, Y+14	; 0x0e
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a e7       	ldi	r20, 0x7A	; 122
    198c:	55 e4       	ldi	r21, 0x45	; 69
    198e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	8f 83       	std	Y+7, r24	; 0x07
    1998:	98 87       	std	Y+8, r25	; 0x08
    199a:	a9 87       	std	Y+9, r26	; 0x09
    199c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    199e:	6f 81       	ldd	r22, Y+7	; 0x07
    19a0:	78 85       	ldd	r23, Y+8	; 0x08
    19a2:	89 85       	ldd	r24, Y+9	; 0x09
    19a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e8       	ldi	r20, 0x80	; 128
    19ac:	5f e3       	ldi	r21, 0x3F	; 63
    19ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19b2:	88 23       	and	r24, r24
    19b4:	2c f4       	brge	.+10     	; 0x19c0 <LCD_init+0x7a>
		__ticks = 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9e 83       	std	Y+6, r25	; 0x06
    19bc:	8d 83       	std	Y+5, r24	; 0x05
    19be:	3f c0       	rjmp	.+126    	; 0x1a3e <LCD_init+0xf8>
	else if (__tmp > 65535)
    19c0:	6f 81       	ldd	r22, Y+7	; 0x07
    19c2:	78 85       	ldd	r23, Y+8	; 0x08
    19c4:	89 85       	ldd	r24, Y+9	; 0x09
    19c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	3f ef       	ldi	r19, 0xFF	; 255
    19cc:	4f e7       	ldi	r20, 0x7F	; 127
    19ce:	57 e4       	ldi	r21, 0x47	; 71
    19d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19d4:	18 16       	cp	r1, r24
    19d6:	4c f5       	brge	.+82     	; 0x1a2a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19da:	7c 85       	ldd	r23, Y+12	; 0x0c
    19dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19de:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e2       	ldi	r20, 0x20	; 32
    19e6:	51 e4       	ldi	r21, 0x41	; 65
    19e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	0f c0       	rjmp	.+30     	; 0x1a20 <LCD_init+0xda>
    1a02:	80 e9       	ldi	r24, 0x90	; 144
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	9c 83       	std	Y+4, r25	; 0x04
    1a08:	8b 83       	std	Y+3, r24	; 0x03
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <LCD_init+0xc8>
    1a12:	9c 83       	std	Y+4, r25	; 0x04
    1a14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	69 f7       	brne	.-38     	; 0x1a02 <LCD_init+0xbc>
    1a28:	14 c0       	rjmp	.+40     	; 0x1a52 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	9e 81       	ldd	r25, Y+6	; 0x06
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <LCD_init+0x104>
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	63 e0       	ldi	r22, 0x03	; 3
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	64 e0       	ldi	r22, 0x04	; 4
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	65 e0       	ldi	r22, 0x05	; 5
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	66 e0       	ldi	r22, 0x06	; 6
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1a7a:	83 e3       	ldi	r24, 0x33	; 51
    1a7c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1a80:	82 e3       	ldi	r24, 0x32	; 50
    1a82:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1a86:	88 e2       	ldi	r24, 0x28	; 40
    1a88:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a8c:	8c e0       	ldi	r24, 0x0C	; 12
    1a8e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_sendCommand>
}
    1a98:	2e 96       	adiw	r28, 0x0e	; 14
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	c3 56       	subi	r28, 0x63	; 99
    1ab8:	d0 40       	sbci	r29, 0x00	; 0
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	ed 59       	subi	r30, 0x9D	; 157
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	61 e0       	ldi	r22, 0x01	; 1
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e1 5a       	subi	r30, 0xA1	; 161
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a0 e8       	ldi	r26, 0x80	; 128
    1ae2:	bf e3       	ldi	r27, 0x3F	; 63
    1ae4:	80 83       	st	Z, r24
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	a2 83       	std	Z+2, r26	; 0x02
    1aea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aec:	8e 01       	movw	r16, r28
    1aee:	05 5a       	subi	r16, 0xA5	; 165
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	fe 01       	movw	r30, r28
    1af4:	e1 5a       	subi	r30, 0xA1	; 161
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	60 81       	ld	r22, Z
    1afa:	71 81       	ldd	r23, Z+1	; 0x01
    1afc:	82 81       	ldd	r24, Z+2	; 0x02
    1afe:	93 81       	ldd	r25, Z+3	; 0x03
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a e7       	ldi	r20, 0x7A	; 122
    1b06:	55 e4       	ldi	r21, 0x45	; 69
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	f8 01       	movw	r30, r16
    1b12:	80 83       	st	Z, r24
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	a2 83       	std	Z+2, r26	; 0x02
    1b18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	e5 5a       	subi	r30, 0xA5	; 165
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	44 f4       	brge	.+16     	; 0x1b48 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e7 5a       	subi	r30, 0xA7	; 167
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	91 83       	std	Z+1, r25	; 0x01
    1b44:	80 83       	st	Z, r24
    1b46:	64 c0       	rjmp	.+200    	; 0x1c10 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e5 5a       	subi	r30, 0xA5	; 165
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	3f ef       	ldi	r19, 0xFF	; 255
    1b5a:	4f e7       	ldi	r20, 0x7F	; 127
    1b5c:	57 e4       	ldi	r21, 0x47	; 71
    1b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	0c f0       	brlt	.+2      	; 0x1b68 <LCD_sendCommand+0xbe>
    1b66:	43 c0       	rjmp	.+134    	; 0x1bee <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b68:	fe 01       	movw	r30, r28
    1b6a:	e1 5a       	subi	r30, 0xA1	; 161
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	60 81       	ld	r22, Z
    1b70:	71 81       	ldd	r23, Z+1	; 0x01
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e2       	ldi	r20, 0x20	; 32
    1b7c:	51 e4       	ldi	r21, 0x41	; 65
    1b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	8e 01       	movw	r16, r28
    1b88:	07 5a       	subi	r16, 0xA7	; 167
    1b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	f8 01       	movw	r30, r16
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	80 83       	st	Z, r24
    1b9e:	1f c0       	rjmp	.+62     	; 0x1bde <LCD_sendCommand+0x134>
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e9 5a       	subi	r30, 0xA9	; 169
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 e9       	ldi	r24, 0x90	; 144
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	80 83       	st	Z, r24
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e9 5a       	subi	r30, 0xA9	; 169
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <LCD_sendCommand+0x10e>
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e9 5a       	subi	r30, 0xA9	; 169
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc6:	de 01       	movw	r26, r28
    1bc8:	a7 5a       	subi	r26, 0xA7	; 167
    1bca:	bf 4f       	sbci	r27, 0xFF	; 255
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e7 5a       	subi	r30, 0xA7	; 167
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	11 96       	adiw	r26, 0x01	; 1
    1bda:	9c 93       	st	X, r25
    1bdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	fe 01       	movw	r30, r28
    1be0:	e7 5a       	subi	r30, 0xA7	; 167
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	80 81       	ld	r24, Z
    1be6:	91 81       	ldd	r25, Z+1	; 0x01
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	d1 f6       	brne	.-76     	; 0x1ba0 <LCD_sendCommand+0xf6>
    1bec:	27 c0       	rjmp	.+78     	; 0x1c3c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bee:	8e 01       	movw	r16, r28
    1bf0:	07 5a       	subi	r16, 0xA7	; 167
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e5 5a       	subi	r30, 0xA5	; 165
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
    1c10:	de 01       	movw	r26, r28
    1c12:	ab 5a       	subi	r26, 0xAB	; 171
    1c14:	bf 4f       	sbci	r27, 0xFF	; 255
    1c16:	fe 01       	movw	r30, r28
    1c18:	e7 5a       	subi	r30, 0xA7	; 167
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	80 81       	ld	r24, Z
    1c1e:	91 81       	ldd	r25, Z+1	; 0x01
    1c20:	8d 93       	st	X+, r24
    1c22:	9c 93       	st	X, r25
    1c24:	fe 01       	movw	r30, r28
    1c26:	eb 5a       	subi	r30, 0xAB	; 171
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 81       	ld	r24, Z
    1c2c:	91 81       	ldd	r25, Z+1	; 0x01
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_sendCommand+0x184>
    1c32:	fe 01       	movw	r30, r28
    1c34:	eb 5a       	subi	r30, 0xAB	; 171
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	62 e0       	ldi	r22, 0x02	; 2
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1c46:	fe 01       	movw	r30, r28
    1c48:	ef 5a       	subi	r30, 0xAF	; 175
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	a0 e8       	ldi	r26, 0x80	; 128
    1c52:	bf e3       	ldi	r27, 0x3F	; 63
    1c54:	80 83       	st	Z, r24
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	a2 83       	std	Z+2, r26	; 0x02
    1c5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5c:	8e 01       	movw	r16, r28
    1c5e:	03 5b       	subi	r16, 0xB3	; 179
    1c60:	1f 4f       	sbci	r17, 0xFF	; 255
    1c62:	fe 01       	movw	r30, r28
    1c64:	ef 5a       	subi	r30, 0xAF	; 175
    1c66:	ff 4f       	sbci	r31, 0xFF	; 255
    1c68:	60 81       	ld	r22, Z
    1c6a:	71 81       	ldd	r23, Z+1	; 0x01
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	93 81       	ldd	r25, Z+3	; 0x03
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	4a e7       	ldi	r20, 0x7A	; 122
    1c76:	55 e4       	ldi	r21, 0x45	; 69
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	f8 01       	movw	r30, r16
    1c82:	80 83       	st	Z, r24
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	a2 83       	std	Z+2, r26	; 0x02
    1c88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e3 5b       	subi	r30, 0xB3	; 179
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	60 81       	ld	r22, Z
    1c92:	71 81       	ldd	r23, Z+1	; 0x01
    1c94:	82 81       	ldd	r24, Z+2	; 0x02
    1c96:	93 81       	ldd	r25, Z+3	; 0x03
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e8       	ldi	r20, 0x80	; 128
    1c9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ca0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca4:	88 23       	and	r24, r24
    1ca6:	44 f4       	brge	.+16     	; 0x1cb8 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e5 5b       	subi	r30, 0xB5	; 181
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	80 83       	st	Z, r24
    1cb6:	64 c0       	rjmp	.+200    	; 0x1d80 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1cb8:	fe 01       	movw	r30, r28
    1cba:	e3 5b       	subi	r30, 0xB3	; 179
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	57 e4       	ldi	r21, 0x47	; 71
    1cce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	0c f0       	brlt	.+2      	; 0x1cd8 <LCD_sendCommand+0x22e>
    1cd6:	43 c0       	rjmp	.+134    	; 0x1d5e <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd8:	fe 01       	movw	r30, r28
    1cda:	ef 5a       	subi	r30, 0xAF	; 175
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	60 81       	ld	r22, Z
    1ce0:	71 81       	ldd	r23, Z+1	; 0x01
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e2       	ldi	r20, 0x20	; 32
    1cec:	51 e4       	ldi	r21, 0x41	; 65
    1cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	8e 01       	movw	r16, r28
    1cf8:	05 5b       	subi	r16, 0xB5	; 181
    1cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfc:	bc 01       	movw	r22, r24
    1cfe:	cd 01       	movw	r24, r26
    1d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	f8 01       	movw	r30, r16
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	80 83       	st	Z, r24
    1d0e:	1f c0       	rjmp	.+62     	; 0x1d4e <LCD_sendCommand+0x2a4>
    1d10:	fe 01       	movw	r30, r28
    1d12:	e7 5b       	subi	r30, 0xB7	; 183
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 e9       	ldi	r24, 0x90	; 144
    1d18:	91 e0       	ldi	r25, 0x01	; 1
    1d1a:	91 83       	std	Z+1, r25	; 0x01
    1d1c:	80 83       	st	Z, r24
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e7 5b       	subi	r30, 0xB7	; 183
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	80 81       	ld	r24, Z
    1d26:	91 81       	ldd	r25, Z+1	; 0x01
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCD_sendCommand+0x27e>
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e7 5b       	subi	r30, 0xB7	; 183
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	de 01       	movw	r26, r28
    1d38:	a5 5b       	subi	r26, 0xB5	; 181
    1d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e5 5b       	subi	r30, 0xB5	; 181
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	11 96       	adiw	r26, 0x01	; 1
    1d4a:	9c 93       	st	X, r25
    1d4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4e:	fe 01       	movw	r30, r28
    1d50:	e5 5b       	subi	r30, 0xB5	; 181
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	d1 f6       	brne	.-76     	; 0x1d10 <LCD_sendCommand+0x266>
    1d5c:	27 c0       	rjmp	.+78     	; 0x1dac <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5e:	8e 01       	movw	r16, r28
    1d60:	05 5b       	subi	r16, 0xB5	; 181
    1d62:	1f 4f       	sbci	r17, 0xFF	; 255
    1d64:	fe 01       	movw	r30, r28
    1d66:	e3 5b       	subi	r30, 0xB3	; 179
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	80 83       	st	Z, r24
    1d80:	de 01       	movw	r26, r28
    1d82:	a9 5b       	subi	r26, 0xB9	; 185
    1d84:	bf 4f       	sbci	r27, 0xFF	; 255
    1d86:	fe 01       	movw	r30, r28
    1d88:	e5 5b       	subi	r30, 0xB5	; 181
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	91 81       	ldd	r25, Z+1	; 0x01
    1d90:	8d 93       	st	X+, r24
    1d92:	9c 93       	st	X, r25
    1d94:	fe 01       	movw	r30, r28
    1d96:	e9 5b       	subi	r30, 0xB9	; 185
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_sendCommand+0x2f4>
    1da2:	fe 01       	movw	r30, r28
    1da4:	e9 5b       	subi	r30, 0xB9	; 185
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1dac:	fe 01       	movw	r30, r28
    1dae:	ed 59       	subi	r30, 0x9D	; 157
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 81       	ld	r24, Z
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	80 71       	andi	r24, 0x10	; 16
    1dba:	90 70       	andi	r25, 0x00	; 0
    1dbc:	95 95       	asr	r25
    1dbe:	87 95       	ror	r24
    1dc0:	95 95       	asr	r25
    1dc2:	87 95       	ror	r24
    1dc4:	95 95       	asr	r25
    1dc6:	87 95       	ror	r24
    1dc8:	95 95       	asr	r25
    1dca:	87 95       	ror	r24
    1dcc:	98 2f       	mov	r25, r24
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	63 e0       	ldi	r22, 0x03	; 3
    1dd2:	49 2f       	mov	r20, r25
    1dd4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1dd8:	fe 01       	movw	r30, r28
    1dda:	ed 59       	subi	r30, 0x9D	; 157
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	80 72       	andi	r24, 0x20	; 32
    1de6:	90 70       	andi	r25, 0x00	; 0
    1de8:	95 95       	asr	r25
    1dea:	87 95       	ror	r24
    1dec:	95 95       	asr	r25
    1dee:	87 95       	ror	r24
    1df0:	95 95       	asr	r25
    1df2:	87 95       	ror	r24
    1df4:	95 95       	asr	r25
    1df6:	87 95       	ror	r24
    1df8:	95 95       	asr	r25
    1dfa:	87 95       	ror	r24
    1dfc:	98 2f       	mov	r25, r24
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	64 e0       	ldi	r22, 0x04	; 4
    1e02:	49 2f       	mov	r20, r25
    1e04:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1e08:	fe 01       	movw	r30, r28
    1e0a:	ed 59       	subi	r30, 0x9D	; 157
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 2f       	mov	r24, r24
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	80 74       	andi	r24, 0x40	; 64
    1e16:	90 70       	andi	r25, 0x00	; 0
    1e18:	08 2e       	mov	r0, r24
    1e1a:	89 2f       	mov	r24, r25
    1e1c:	00 0c       	add	r0, r0
    1e1e:	88 1f       	adc	r24, r24
    1e20:	99 0b       	sbc	r25, r25
    1e22:	00 0c       	add	r0, r0
    1e24:	88 1f       	adc	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	98 2f       	mov	r25, r24
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	65 e0       	ldi	r22, 0x05	; 5
    1e2e:	49 2f       	mov	r20, r25
    1e30:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1e34:	fe 01       	movw	r30, r28
    1e36:	ed 59       	subi	r30, 0x9D	; 157
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	98 2f       	mov	r25, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	99 27       	eor	r25, r25
    1e42:	99 1f       	adc	r25, r25
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	66 e0       	ldi	r22, 0x06	; 6
    1e48:	49 2f       	mov	r20, r25
    1e4a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1e4e:	fe 01       	movw	r30, r28
    1e50:	ed 5b       	subi	r30, 0xBD	; 189
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e8       	ldi	r26, 0x80	; 128
    1e5a:	bf e3       	ldi	r27, 0x3F	; 63
    1e5c:	80 83       	st	Z, r24
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	a2 83       	std	Z+2, r26	; 0x02
    1e62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e64:	8e 01       	movw	r16, r28
    1e66:	01 5c       	subi	r16, 0xC1	; 193
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	ed 5b       	subi	r30, 0xBD	; 189
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a e7       	ldi	r20, 0x7A	; 122
    1e7e:	55 e4       	ldi	r21, 0x45	; 69
    1e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	f8 01       	movw	r30, r16
    1e8a:	80 83       	st	Z, r24
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	a2 83       	std	Z+2, r26	; 0x02
    1e90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e92:	fe 01       	movw	r30, r28
    1e94:	ff 96       	adiw	r30, 0x3f	; 63
    1e96:	60 81       	ld	r22, Z
    1e98:	71 81       	ldd	r23, Z+1	; 0x01
    1e9a:	82 81       	ldd	r24, Z+2	; 0x02
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eaa:	88 23       	and	r24, r24
    1eac:	2c f4       	brge	.+10     	; 0x1eb8 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9e af       	std	Y+62, r25	; 0x3e
    1eb4:	8d af       	std	Y+61, r24	; 0x3d
    1eb6:	46 c0       	rjmp	.+140    	; 0x1f44 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ff 96       	adiw	r30, 0x3f	; 63
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	3f ef       	ldi	r19, 0xFF	; 255
    1ec8:	4f e7       	ldi	r20, 0x7F	; 127
    1eca:	57 e4       	ldi	r21, 0x47	; 71
    1ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed0:	18 16       	cp	r1, r24
    1ed2:	64 f5       	brge	.+88     	; 0x1f2c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ed 5b       	subi	r30, 0xBD	; 189
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	60 81       	ld	r22, Z
    1edc:	71 81       	ldd	r23, Z+1	; 0x01
    1ede:	82 81       	ldd	r24, Z+2	; 0x02
    1ee0:	93 81       	ldd	r25, Z+3	; 0x03
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	9e af       	std	Y+62, r25	; 0x3e
    1f00:	8d af       	std	Y+61, r24	; 0x3d
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <LCD_sendCommand+0x478>
    1f04:	80 e9       	ldi	r24, 0x90	; 144
    1f06:	91 e0       	ldi	r25, 0x01	; 1
    1f08:	9c af       	std	Y+60, r25	; 0x3c
    1f0a:	8b af       	std	Y+59, r24	; 0x3b
    1f0c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f0e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <LCD_sendCommand+0x466>
    1f14:	9c af       	std	Y+60, r25	; 0x3c
    1f16:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f18:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	9e af       	std	Y+62, r25	; 0x3e
    1f20:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f24:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	69 f7       	brne	.-38     	; 0x1f04 <LCD_sendCommand+0x45a>
    1f2a:	16 c0       	rjmp	.+44     	; 0x1f58 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	ff 96       	adiw	r30, 0x3f	; 63
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	82 81       	ldd	r24, Z+2	; 0x02
    1f36:	93 81       	ldd	r25, Z+3	; 0x03
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9e af       	std	Y+62, r25	; 0x3e
    1f42:	8d af       	std	Y+61, r24	; 0x3d
    1f44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f48:	9a af       	std	Y+58, r25	; 0x3a
    1f4a:	89 af       	std	Y+57, r24	; 0x39
    1f4c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f4e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_sendCommand+0x4a6>
    1f54:	9a af       	std	Y+58, r25	; 0x3a
    1f56:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	62 e0       	ldi	r22, 0x02	; 2
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a0 e8       	ldi	r26, 0x80	; 128
    1f68:	bf e3       	ldi	r27, 0x3F	; 63
    1f6a:	8d ab       	std	Y+53, r24	; 0x35
    1f6c:	9e ab       	std	Y+54, r25	; 0x36
    1f6e:	af ab       	std	Y+55, r26	; 0x37
    1f70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f72:	6d a9       	ldd	r22, Y+53	; 0x35
    1f74:	7e a9       	ldd	r23, Y+54	; 0x36
    1f76:	8f a9       	ldd	r24, Y+55	; 0x37
    1f78:	98 ad       	ldd	r25, Y+56	; 0x38
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	4a e7       	ldi	r20, 0x7A	; 122
    1f80:	55 e4       	ldi	r21, 0x45	; 69
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	89 ab       	std	Y+49, r24	; 0x31
    1f8c:	9a ab       	std	Y+50, r25	; 0x32
    1f8e:	ab ab       	std	Y+51, r26	; 0x33
    1f90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f92:	69 a9       	ldd	r22, Y+49	; 0x31
    1f94:	7a a9       	ldd	r23, Y+50	; 0x32
    1f96:	8b a9       	ldd	r24, Y+51	; 0x33
    1f98:	9c a9       	ldd	r25, Y+52	; 0x34
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e8       	ldi	r20, 0x80	; 128
    1fa0:	5f e3       	ldi	r21, 0x3F	; 63
    1fa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa6:	88 23       	and	r24, r24
    1fa8:	2c f4       	brge	.+10     	; 0x1fb4 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	98 ab       	std	Y+48, r25	; 0x30
    1fb0:	8f a7       	std	Y+47, r24	; 0x2f
    1fb2:	3f c0       	rjmp	.+126    	; 0x2032 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1fb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1fba:	9c a9       	ldd	r25, Y+52	; 0x34
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	3f ef       	ldi	r19, 0xFF	; 255
    1fc0:	4f e7       	ldi	r20, 0x7F	; 127
    1fc2:	57 e4       	ldi	r21, 0x47	; 71
    1fc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fc8:	18 16       	cp	r1, r24
    1fca:	4c f5       	brge	.+82     	; 0x201e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fcc:	6d a9       	ldd	r22, Y+53	; 0x35
    1fce:	7e a9       	ldd	r23, Y+54	; 0x36
    1fd0:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd2:	98 ad       	ldd	r25, Y+56	; 0x38
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e2       	ldi	r20, 0x20	; 32
    1fda:	51 e4       	ldi	r21, 0x41	; 65
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	bc 01       	movw	r22, r24
    1fe6:	cd 01       	movw	r24, r26
    1fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	98 ab       	std	Y+48, r25	; 0x30
    1ff2:	8f a7       	std	Y+47, r24	; 0x2f
    1ff4:	0f c0       	rjmp	.+30     	; 0x2014 <LCD_sendCommand+0x56a>
    1ff6:	80 e9       	ldi	r24, 0x90	; 144
    1ff8:	91 e0       	ldi	r25, 0x01	; 1
    1ffa:	9e a7       	std	Y+46, r25	; 0x2e
    1ffc:	8d a7       	std	Y+45, r24	; 0x2d
    1ffe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2000:	9e a5       	ldd	r25, Y+46	; 0x2e
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <LCD_sendCommand+0x558>
    2006:	9e a7       	std	Y+46, r25	; 0x2e
    2008:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200a:	8f a5       	ldd	r24, Y+47	; 0x2f
    200c:	98 a9       	ldd	r25, Y+48	; 0x30
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	98 ab       	std	Y+48, r25	; 0x30
    2012:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2014:	8f a5       	ldd	r24, Y+47	; 0x2f
    2016:	98 a9       	ldd	r25, Y+48	; 0x30
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	69 f7       	brne	.-38     	; 0x1ff6 <LCD_sendCommand+0x54c>
    201c:	14 c0       	rjmp	.+40     	; 0x2046 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201e:	69 a9       	ldd	r22, Y+49	; 0x31
    2020:	7a a9       	ldd	r23, Y+50	; 0x32
    2022:	8b a9       	ldd	r24, Y+51	; 0x33
    2024:	9c a9       	ldd	r25, Y+52	; 0x34
    2026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	98 ab       	std	Y+48, r25	; 0x30
    2030:	8f a7       	std	Y+47, r24	; 0x2f
    2032:	8f a5       	ldd	r24, Y+47	; 0x2f
    2034:	98 a9       	ldd	r25, Y+48	; 0x30
    2036:	9c a7       	std	Y+44, r25	; 0x2c
    2038:	8b a7       	std	Y+43, r24	; 0x2b
    203a:	8b a5       	ldd	r24, Y+43	; 0x2b
    203c:	9c a5       	ldd	r25, Y+44	; 0x2c
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <LCD_sendCommand+0x594>
    2042:	9c a7       	std	Y+44, r25	; 0x2c
    2044:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	62 e0       	ldi	r22, 0x02	; 2
    204a:	41 e0       	ldi	r20, 0x01	; 1
    204c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	a0 e8       	ldi	r26, 0x80	; 128
    2056:	bf e3       	ldi	r27, 0x3F	; 63
    2058:	8f a3       	std	Y+39, r24	; 0x27
    205a:	98 a7       	std	Y+40, r25	; 0x28
    205c:	a9 a7       	std	Y+41, r26	; 0x29
    205e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2060:	6f a1       	ldd	r22, Y+39	; 0x27
    2062:	78 a5       	ldd	r23, Y+40	; 0x28
    2064:	89 a5       	ldd	r24, Y+41	; 0x29
    2066:	9a a5       	ldd	r25, Y+42	; 0x2a
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	4a e7       	ldi	r20, 0x7A	; 122
    206e:	55 e4       	ldi	r21, 0x45	; 69
    2070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	8b a3       	std	Y+35, r24	; 0x23
    207a:	9c a3       	std	Y+36, r25	; 0x24
    207c:	ad a3       	std	Y+37, r26	; 0x25
    207e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2080:	6b a1       	ldd	r22, Y+35	; 0x23
    2082:	7c a1       	ldd	r23, Y+36	; 0x24
    2084:	8d a1       	ldd	r24, Y+37	; 0x25
    2086:	9e a1       	ldd	r25, Y+38	; 0x26
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	40 e8       	ldi	r20, 0x80	; 128
    208e:	5f e3       	ldi	r21, 0x3F	; 63
    2090:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2094:	88 23       	and	r24, r24
    2096:	2c f4       	brge	.+10     	; 0x20a2 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9a a3       	std	Y+34, r25	; 0x22
    209e:	89 a3       	std	Y+33, r24	; 0x21
    20a0:	3f c0       	rjmp	.+126    	; 0x2120 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    20a2:	6b a1       	ldd	r22, Y+35	; 0x23
    20a4:	7c a1       	ldd	r23, Y+36	; 0x24
    20a6:	8d a1       	ldd	r24, Y+37	; 0x25
    20a8:	9e a1       	ldd	r25, Y+38	; 0x26
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	3f ef       	ldi	r19, 0xFF	; 255
    20ae:	4f e7       	ldi	r20, 0x7F	; 127
    20b0:	57 e4       	ldi	r21, 0x47	; 71
    20b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b6:	18 16       	cp	r1, r24
    20b8:	4c f5       	brge	.+82     	; 0x210c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ba:	6f a1       	ldd	r22, Y+39	; 0x27
    20bc:	78 a5       	ldd	r23, Y+40	; 0x28
    20be:	89 a5       	ldd	r24, Y+41	; 0x29
    20c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e2       	ldi	r20, 0x20	; 32
    20c8:	51 e4       	ldi	r21, 0x41	; 65
    20ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9a a3       	std	Y+34, r25	; 0x22
    20e0:	89 a3       	std	Y+33, r24	; 0x21
    20e2:	0f c0       	rjmp	.+30     	; 0x2102 <LCD_sendCommand+0x658>
    20e4:	80 e9       	ldi	r24, 0x90	; 144
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	98 a3       	std	Y+32, r25	; 0x20
    20ea:	8f 8f       	std	Y+31, r24	; 0x1f
    20ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ee:	98 a1       	ldd	r25, Y+32	; 0x20
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <LCD_sendCommand+0x646>
    20f4:	98 a3       	std	Y+32, r25	; 0x20
    20f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f8:	89 a1       	ldd	r24, Y+33	; 0x21
    20fa:	9a a1       	ldd	r25, Y+34	; 0x22
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	9a a3       	std	Y+34, r25	; 0x22
    2100:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2102:	89 a1       	ldd	r24, Y+33	; 0x21
    2104:	9a a1       	ldd	r25, Y+34	; 0x22
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	69 f7       	brne	.-38     	; 0x20e4 <LCD_sendCommand+0x63a>
    210a:	14 c0       	rjmp	.+40     	; 0x2134 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210c:	6b a1       	ldd	r22, Y+35	; 0x23
    210e:	7c a1       	ldd	r23, Y+36	; 0x24
    2110:	8d a1       	ldd	r24, Y+37	; 0x25
    2112:	9e a1       	ldd	r25, Y+38	; 0x26
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9a a3       	std	Y+34, r25	; 0x22
    211e:	89 a3       	std	Y+33, r24	; 0x21
    2120:	89 a1       	ldd	r24, Y+33	; 0x21
    2122:	9a a1       	ldd	r25, Y+34	; 0x22
    2124:	9e 8f       	std	Y+30, r25	; 0x1e
    2126:	8d 8f       	std	Y+29, r24	; 0x1d
    2128:	8d 8d       	ldd	r24, Y+29	; 0x1d
    212a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <LCD_sendCommand+0x682>
    2130:	9e 8f       	std	Y+30, r25	; 0x1e
    2132:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2134:	fe 01       	movw	r30, r28
    2136:	ed 59       	subi	r30, 0x9D	; 157
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	98 2f       	mov	r25, r24
    213e:	91 70       	andi	r25, 0x01	; 1
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	63 e0       	ldi	r22, 0x03	; 3
    2144:	49 2f       	mov	r20, r25
    2146:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    214a:	fe 01       	movw	r30, r28
    214c:	ed 59       	subi	r30, 0x9D	; 157
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	80 81       	ld	r24, Z
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	82 70       	andi	r24, 0x02	; 2
    2158:	90 70       	andi	r25, 0x00	; 0
    215a:	95 95       	asr	r25
    215c:	87 95       	ror	r24
    215e:	98 2f       	mov	r25, r24
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	64 e0       	ldi	r22, 0x04	; 4
    2164:	49 2f       	mov	r20, r25
    2166:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    216a:	fe 01       	movw	r30, r28
    216c:	ed 59       	subi	r30, 0x9D	; 157
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	84 70       	andi	r24, 0x04	; 4
    2178:	90 70       	andi	r25, 0x00	; 0
    217a:	95 95       	asr	r25
    217c:	87 95       	ror	r24
    217e:	95 95       	asr	r25
    2180:	87 95       	ror	r24
    2182:	98 2f       	mov	r25, r24
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	65 e0       	ldi	r22, 0x05	; 5
    2188:	49 2f       	mov	r20, r25
    218a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    218e:	fe 01       	movw	r30, r28
    2190:	ed 59       	subi	r30, 0x9D	; 157
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	80 81       	ld	r24, Z
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	88 70       	andi	r24, 0x08	; 8
    219c:	90 70       	andi	r25, 0x00	; 0
    219e:	95 95       	asr	r25
    21a0:	87 95       	ror	r24
    21a2:	95 95       	asr	r25
    21a4:	87 95       	ror	r24
    21a6:	95 95       	asr	r25
    21a8:	87 95       	ror	r24
    21aa:	98 2f       	mov	r25, r24
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	66 e0       	ldi	r22, 0x06	; 6
    21b0:	49 2f       	mov	r20, r25
    21b2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e8       	ldi	r26, 0x80	; 128
    21bc:	bf e3       	ldi	r27, 0x3F	; 63
    21be:	89 8f       	std	Y+25, r24	; 0x19
    21c0:	9a 8f       	std	Y+26, r25	; 0x1a
    21c2:	ab 8f       	std	Y+27, r26	; 0x1b
    21c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c6:	69 8d       	ldd	r22, Y+25	; 0x19
    21c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	4a e7       	ldi	r20, 0x7A	; 122
    21d4:	55 e4       	ldi	r21, 0x45	; 69
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	8d 8b       	std	Y+21, r24	; 0x15
    21e0:	9e 8b       	std	Y+22, r25	; 0x16
    21e2:	af 8b       	std	Y+23, r26	; 0x17
    21e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21e6:	6d 89       	ldd	r22, Y+21	; 0x15
    21e8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ea:	8f 89       	ldd	r24, Y+23	; 0x17
    21ec:	98 8d       	ldd	r25, Y+24	; 0x18
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e8       	ldi	r20, 0x80	; 128
    21f4:	5f e3       	ldi	r21, 0x3F	; 63
    21f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21fa:	88 23       	and	r24, r24
    21fc:	2c f4       	brge	.+10     	; 0x2208 <LCD_sendCommand+0x75e>
		__ticks = 1;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9c 8b       	std	Y+20, r25	; 0x14
    2204:	8b 8b       	std	Y+19, r24	; 0x13
    2206:	3f c0       	rjmp	.+126    	; 0x2286 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2208:	6d 89       	ldd	r22, Y+21	; 0x15
    220a:	7e 89       	ldd	r23, Y+22	; 0x16
    220c:	8f 89       	ldd	r24, Y+23	; 0x17
    220e:	98 8d       	ldd	r25, Y+24	; 0x18
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	3f ef       	ldi	r19, 0xFF	; 255
    2214:	4f e7       	ldi	r20, 0x7F	; 127
    2216:	57 e4       	ldi	r21, 0x47	; 71
    2218:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    221c:	18 16       	cp	r1, r24
    221e:	4c f5       	brge	.+82     	; 0x2272 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2220:	69 8d       	ldd	r22, Y+25	; 0x19
    2222:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2224:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2226:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e2       	ldi	r20, 0x20	; 32
    222e:	51 e4       	ldi	r21, 0x41	; 65
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	9c 8b       	std	Y+20, r25	; 0x14
    2246:	8b 8b       	std	Y+19, r24	; 0x13
    2248:	0f c0       	rjmp	.+30     	; 0x2268 <LCD_sendCommand+0x7be>
    224a:	80 e9       	ldi	r24, 0x90	; 144
    224c:	91 e0       	ldi	r25, 0x01	; 1
    224e:	9a 8b       	std	Y+18, r25	; 0x12
    2250:	89 8b       	std	Y+17, r24	; 0x11
    2252:	89 89       	ldd	r24, Y+17	; 0x11
    2254:	9a 89       	ldd	r25, Y+18	; 0x12
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_sendCommand+0x7ac>
    225a:	9a 8b       	std	Y+18, r25	; 0x12
    225c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225e:	8b 89       	ldd	r24, Y+19	; 0x13
    2260:	9c 89       	ldd	r25, Y+20	; 0x14
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	9c 8b       	std	Y+20, r25	; 0x14
    2266:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2268:	8b 89       	ldd	r24, Y+19	; 0x13
    226a:	9c 89       	ldd	r25, Y+20	; 0x14
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	69 f7       	brne	.-38     	; 0x224a <LCD_sendCommand+0x7a0>
    2270:	14 c0       	rjmp	.+40     	; 0x229a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2272:	6d 89       	ldd	r22, Y+21	; 0x15
    2274:	7e 89       	ldd	r23, Y+22	; 0x16
    2276:	8f 89       	ldd	r24, Y+23	; 0x17
    2278:	98 8d       	ldd	r25, Y+24	; 0x18
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9c 8b       	std	Y+20, r25	; 0x14
    2284:	8b 8b       	std	Y+19, r24	; 0x13
    2286:	8b 89       	ldd	r24, Y+19	; 0x13
    2288:	9c 89       	ldd	r25, Y+20	; 0x14
    228a:	98 8b       	std	Y+16, r25	; 0x10
    228c:	8f 87       	std	Y+15, r24	; 0x0f
    228e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2290:	98 89       	ldd	r25, Y+16	; 0x10
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	f1 f7       	brne	.-4      	; 0x2292 <LCD_sendCommand+0x7e8>
    2296:	98 8b       	std	Y+16, r25	; 0x10
    2298:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	62 e0       	ldi	r22, 0x02	; 2
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a0 e8       	ldi	r26, 0x80	; 128
    22aa:	bf e3       	ldi	r27, 0x3F	; 63
    22ac:	8b 87       	std	Y+11, r24	; 0x0b
    22ae:	9c 87       	std	Y+12, r25	; 0x0c
    22b0:	ad 87       	std	Y+13, r26	; 0x0d
    22b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	4a e7       	ldi	r20, 0x7A	; 122
    22c2:	55 e4       	ldi	r21, 0x45	; 69
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	8f 83       	std	Y+7, r24	; 0x07
    22ce:	98 87       	std	Y+8, r25	; 0x08
    22d0:	a9 87       	std	Y+9, r26	; 0x09
    22d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <LCD_sendCommand+0x84c>
		__ticks = 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	3f c0       	rjmp	.+126    	; 0x2374 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    22f6:	6f 81       	ldd	r22, Y+7	; 0x07
    22f8:	78 85       	ldd	r23, Y+8	; 0x08
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	57 e4       	ldi	r21, 0x47	; 71
    2306:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    230a:	18 16       	cp	r1, r24
    230c:	4c f5       	brge	.+82     	; 0x2360 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2310:	7c 85       	ldd	r23, Y+12	; 0x0c
    2312:	8d 85       	ldd	r24, Y+13	; 0x0d
    2314:	9e 85       	ldd	r25, Y+14	; 0x0e
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	0f c0       	rjmp	.+30     	; 0x2356 <LCD_sendCommand+0x8ac>
    2338:	80 e9       	ldi	r24, 0x90	; 144
    233a:	91 e0       	ldi	r25, 0x01	; 1
    233c:	9c 83       	std	Y+4, r25	; 0x04
    233e:	8b 83       	std	Y+3, r24	; 0x03
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <LCD_sendCommand+0x89a>
    2348:	9c 83       	std	Y+4, r25	; 0x04
    234a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	69 f7       	brne	.-38     	; 0x2338 <LCD_sendCommand+0x88e>
    235e:	14 c0       	rjmp	.+40     	; 0x2388 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	6f 81       	ldd	r22, Y+7	; 0x07
    2362:	78 85       	ldd	r23, Y+8	; 0x08
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <LCD_sendCommand+0x8d6>
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2388:	cd 59       	subi	r28, 0x9D	; 157
    238a:	df 4f       	sbci	r29, 0xFF	; 255
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	1f 91       	pop	r17
    239c:	0f 91       	pop	r16
    239e:	08 95       	ret

000023a0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    23a0:	0f 93       	push	r16
    23a2:	1f 93       	push	r17
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	c3 56       	subi	r28, 0x63	; 99
    23ae:	d0 40       	sbci	r29, 0x00	; 0
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	fe 01       	movw	r30, r28
    23bc:	ed 59       	subi	r30, 0x9D	; 157
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	61 e0       	ldi	r22, 0x01	; 1
    23c6:	41 e0       	ldi	r20, 0x01	; 1
    23c8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    23cc:	fe 01       	movw	r30, r28
    23ce:	e1 5a       	subi	r30, 0xA1	; 161
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a0 e8       	ldi	r26, 0x80	; 128
    23d8:	bf e3       	ldi	r27, 0x3F	; 63
    23da:	80 83       	st	Z, r24
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	a2 83       	std	Z+2, r26	; 0x02
    23e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e2:	8e 01       	movw	r16, r28
    23e4:	05 5a       	subi	r16, 0xA5	; 165
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	fe 01       	movw	r30, r28
    23ea:	e1 5a       	subi	r30, 0xA1	; 161
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	4a e7       	ldi	r20, 0x7A	; 122
    23fc:	55 e4       	ldi	r21, 0x45	; 69
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	f8 01       	movw	r30, r16
    2408:	80 83       	st	Z, r24
    240a:	91 83       	std	Z+1, r25	; 0x01
    240c:	a2 83       	std	Z+2, r26	; 0x02
    240e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2410:	fe 01       	movw	r30, r28
    2412:	e5 5a       	subi	r30, 0xA5	; 165
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	60 81       	ld	r22, Z
    2418:	71 81       	ldd	r23, Z+1	; 0x01
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e8       	ldi	r20, 0x80	; 128
    2424:	5f e3       	ldi	r21, 0x3F	; 63
    2426:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    242a:	88 23       	and	r24, r24
    242c:	44 f4       	brge	.+16     	; 0x243e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    242e:	fe 01       	movw	r30, r28
    2430:	e7 5a       	subi	r30, 0xA7	; 167
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	91 83       	std	Z+1, r25	; 0x01
    243a:	80 83       	st	Z, r24
    243c:	64 c0       	rjmp	.+200    	; 0x2506 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    243e:	fe 01       	movw	r30, r28
    2440:	e5 5a       	subi	r30, 0xA5	; 165
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	3f ef       	ldi	r19, 0xFF	; 255
    2450:	4f e7       	ldi	r20, 0x7F	; 127
    2452:	57 e4       	ldi	r21, 0x47	; 71
    2454:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2458:	18 16       	cp	r1, r24
    245a:	0c f0       	brlt	.+2      	; 0x245e <LCD_displayCharacter+0xbe>
    245c:	43 c0       	rjmp	.+134    	; 0x24e4 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245e:	fe 01       	movw	r30, r28
    2460:	e1 5a       	subi	r30, 0xA1	; 161
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	60 81       	ld	r22, Z
    2466:	71 81       	ldd	r23, Z+1	; 0x01
    2468:	82 81       	ldd	r24, Z+2	; 0x02
    246a:	93 81       	ldd	r25, Z+3	; 0x03
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e2       	ldi	r20, 0x20	; 32
    2472:	51 e4       	ldi	r21, 0x41	; 65
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	8e 01       	movw	r16, r28
    247e:	07 5a       	subi	r16, 0xA7	; 167
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	f8 01       	movw	r30, r16
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24
    2494:	1f c0       	rjmp	.+62     	; 0x24d4 <LCD_displayCharacter+0x134>
    2496:	fe 01       	movw	r30, r28
    2498:	e9 5a       	subi	r30, 0xA9	; 169
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 e9       	ldi	r24, 0x90	; 144
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
    24a4:	fe 01       	movw	r30, r28
    24a6:	e9 5a       	subi	r30, 0xA9	; 169
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <LCD_displayCharacter+0x10e>
    24b2:	fe 01       	movw	r30, r28
    24b4:	e9 5a       	subi	r30, 0xA9	; 169
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24bc:	de 01       	movw	r26, r28
    24be:	a7 5a       	subi	r26, 0xA7	; 167
    24c0:	bf 4f       	sbci	r27, 0xFF	; 255
    24c2:	fe 01       	movw	r30, r28
    24c4:	e7 5a       	subi	r30, 0xA7	; 167
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 81       	ld	r24, Z
    24ca:	91 81       	ldd	r25, Z+1	; 0x01
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	11 96       	adiw	r26, 0x01	; 1
    24d0:	9c 93       	st	X, r25
    24d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d4:	fe 01       	movw	r30, r28
    24d6:	e7 5a       	subi	r30, 0xA7	; 167
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	80 81       	ld	r24, Z
    24dc:	91 81       	ldd	r25, Z+1	; 0x01
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	d1 f6       	brne	.-76     	; 0x2496 <LCD_displayCharacter+0xf6>
    24e2:	27 c0       	rjmp	.+78     	; 0x2532 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e4:	8e 01       	movw	r16, r28
    24e6:	07 5a       	subi	r16, 0xA7	; 167
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	fe 01       	movw	r30, r28
    24ec:	e5 5a       	subi	r30, 0xA5	; 165
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	60 81       	ld	r22, Z
    24f2:	71 81       	ldd	r23, Z+1	; 0x01
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	f8 01       	movw	r30, r16
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	de 01       	movw	r26, r28
    2508:	ab 5a       	subi	r26, 0xAB	; 171
    250a:	bf 4f       	sbci	r27, 0xFF	; 255
    250c:	fe 01       	movw	r30, r28
    250e:	e7 5a       	subi	r30, 0xA7	; 167
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	8d 93       	st	X+, r24
    2518:	9c 93       	st	X, r25
    251a:	fe 01       	movw	r30, r28
    251c:	eb 5a       	subi	r30, 0xAB	; 171
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 81       	ld	r24, Z
    2522:	91 81       	ldd	r25, Z+1	; 0x01
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_displayCharacter+0x184>
    2528:	fe 01       	movw	r30, r28
    252a:	eb 5a       	subi	r30, 0xAB	; 171
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	91 83       	std	Z+1, r25	; 0x01
    2530:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	62 e0       	ldi	r22, 0x02	; 2
    2536:	41 e0       	ldi	r20, 0x01	; 1
    2538:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    253c:	fe 01       	movw	r30, r28
    253e:	ef 5a       	subi	r30, 0xAF	; 175
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	a0 e8       	ldi	r26, 0x80	; 128
    2548:	bf e3       	ldi	r27, 0x3F	; 63
    254a:	80 83       	st	Z, r24
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	a2 83       	std	Z+2, r26	; 0x02
    2550:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2552:	8e 01       	movw	r16, r28
    2554:	03 5b       	subi	r16, 0xB3	; 179
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	fe 01       	movw	r30, r28
    255a:	ef 5a       	subi	r30, 0xAF	; 175
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	4a e7       	ldi	r20, 0x7A	; 122
    256c:	55 e4       	ldi	r21, 0x45	; 69
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	f8 01       	movw	r30, r16
    2578:	80 83       	st	Z, r24
    257a:	91 83       	std	Z+1, r25	; 0x01
    257c:	a2 83       	std	Z+2, r26	; 0x02
    257e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2580:	fe 01       	movw	r30, r28
    2582:	e3 5b       	subi	r30, 0xB3	; 179
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	60 81       	ld	r22, Z
    2588:	71 81       	ldd	r23, Z+1	; 0x01
    258a:	82 81       	ldd	r24, Z+2	; 0x02
    258c:	93 81       	ldd	r25, Z+3	; 0x03
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e8       	ldi	r20, 0x80	; 128
    2594:	5f e3       	ldi	r21, 0x3F	; 63
    2596:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    259a:	88 23       	and	r24, r24
    259c:	44 f4       	brge	.+16     	; 0x25ae <LCD_displayCharacter+0x20e>
		__ticks = 1;
    259e:	fe 01       	movw	r30, r28
    25a0:	e5 5b       	subi	r30, 0xB5	; 181
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	80 83       	st	Z, r24
    25ac:	64 c0       	rjmp	.+200    	; 0x2676 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    25ae:	fe 01       	movw	r30, r28
    25b0:	e3 5b       	subi	r30, 0xB3	; 179
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	60 81       	ld	r22, Z
    25b6:	71 81       	ldd	r23, Z+1	; 0x01
    25b8:	82 81       	ldd	r24, Z+2	; 0x02
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	0c f0       	brlt	.+2      	; 0x25ce <LCD_displayCharacter+0x22e>
    25cc:	43 c0       	rjmp	.+134    	; 0x2654 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ce:	fe 01       	movw	r30, r28
    25d0:	ef 5a       	subi	r30, 0xAF	; 175
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	60 81       	ld	r22, Z
    25d6:	71 81       	ldd	r23, Z+1	; 0x01
    25d8:	82 81       	ldd	r24, Z+2	; 0x02
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e2       	ldi	r20, 0x20	; 32
    25e2:	51 e4       	ldi	r21, 0x41	; 65
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	8e 01       	movw	r16, r28
    25ee:	05 5b       	subi	r16, 0xB5	; 181
    25f0:	1f 4f       	sbci	r17, 0xFF	; 255
    25f2:	bc 01       	movw	r22, r24
    25f4:	cd 01       	movw	r24, r26
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	f8 01       	movw	r30, r16
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
    2604:	1f c0       	rjmp	.+62     	; 0x2644 <LCD_displayCharacter+0x2a4>
    2606:	fe 01       	movw	r30, r28
    2608:	e7 5b       	subi	r30, 0xB7	; 183
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 e9       	ldi	r24, 0x90	; 144
    260e:	91 e0       	ldi	r25, 0x01	; 1
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	80 83       	st	Z, r24
    2614:	fe 01       	movw	r30, r28
    2616:	e7 5b       	subi	r30, 0xB7	; 183
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <LCD_displayCharacter+0x27e>
    2622:	fe 01       	movw	r30, r28
    2624:	e7 5b       	subi	r30, 0xB7	; 183
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	de 01       	movw	r26, r28
    262e:	a5 5b       	subi	r26, 0xB5	; 181
    2630:	bf 4f       	sbci	r27, 0xFF	; 255
    2632:	fe 01       	movw	r30, r28
    2634:	e5 5b       	subi	r30, 0xB5	; 181
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	80 81       	ld	r24, Z
    263a:	91 81       	ldd	r25, Z+1	; 0x01
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	11 96       	adiw	r26, 0x01	; 1
    2640:	9c 93       	st	X, r25
    2642:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2644:	fe 01       	movw	r30, r28
    2646:	e5 5b       	subi	r30, 0xB5	; 181
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	d1 f6       	brne	.-76     	; 0x2606 <LCD_displayCharacter+0x266>
    2652:	27 c0       	rjmp	.+78     	; 0x26a2 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2654:	8e 01       	movw	r16, r28
    2656:	05 5b       	subi	r16, 0xB5	; 181
    2658:	1f 4f       	sbci	r17, 0xFF	; 255
    265a:	fe 01       	movw	r30, r28
    265c:	e3 5b       	subi	r30, 0xB3	; 179
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	60 81       	ld	r22, Z
    2662:	71 81       	ldd	r23, Z+1	; 0x01
    2664:	82 81       	ldd	r24, Z+2	; 0x02
    2666:	93 81       	ldd	r25, Z+3	; 0x03
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	f8 01       	movw	r30, r16
    2672:	91 83       	std	Z+1, r25	; 0x01
    2674:	80 83       	st	Z, r24
    2676:	de 01       	movw	r26, r28
    2678:	a9 5b       	subi	r26, 0xB9	; 185
    267a:	bf 4f       	sbci	r27, 0xFF	; 255
    267c:	fe 01       	movw	r30, r28
    267e:	e5 5b       	subi	r30, 0xB5	; 181
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	80 81       	ld	r24, Z
    2684:	91 81       	ldd	r25, Z+1	; 0x01
    2686:	8d 93       	st	X+, r24
    2688:	9c 93       	st	X, r25
    268a:	fe 01       	movw	r30, r28
    268c:	e9 5b       	subi	r30, 0xB9	; 185
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	80 81       	ld	r24, Z
    2692:	91 81       	ldd	r25, Z+1	; 0x01
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <LCD_displayCharacter+0x2f4>
    2698:	fe 01       	movw	r30, r28
    269a:	e9 5b       	subi	r30, 0xB9	; 185
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    26a2:	fe 01       	movw	r30, r28
    26a4:	ed 59       	subi	r30, 0x9D	; 157
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	80 81       	ld	r24, Z
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	80 71       	andi	r24, 0x10	; 16
    26b0:	90 70       	andi	r25, 0x00	; 0
    26b2:	95 95       	asr	r25
    26b4:	87 95       	ror	r24
    26b6:	95 95       	asr	r25
    26b8:	87 95       	ror	r24
    26ba:	95 95       	asr	r25
    26bc:	87 95       	ror	r24
    26be:	95 95       	asr	r25
    26c0:	87 95       	ror	r24
    26c2:	98 2f       	mov	r25, r24
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	63 e0       	ldi	r22, 0x03	; 3
    26c8:	49 2f       	mov	r20, r25
    26ca:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    26ce:	fe 01       	movw	r30, r28
    26d0:	ed 59       	subi	r30, 0x9D	; 157
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	88 2f       	mov	r24, r24
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	80 72       	andi	r24, 0x20	; 32
    26dc:	90 70       	andi	r25, 0x00	; 0
    26de:	95 95       	asr	r25
    26e0:	87 95       	ror	r24
    26e2:	95 95       	asr	r25
    26e4:	87 95       	ror	r24
    26e6:	95 95       	asr	r25
    26e8:	87 95       	ror	r24
    26ea:	95 95       	asr	r25
    26ec:	87 95       	ror	r24
    26ee:	95 95       	asr	r25
    26f0:	87 95       	ror	r24
    26f2:	98 2f       	mov	r25, r24
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	64 e0       	ldi	r22, 0x04	; 4
    26f8:	49 2f       	mov	r20, r25
    26fa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    26fe:	fe 01       	movw	r30, r28
    2700:	ed 59       	subi	r30, 0x9D	; 157
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	80 74       	andi	r24, 0x40	; 64
    270c:	90 70       	andi	r25, 0x00	; 0
    270e:	08 2e       	mov	r0, r24
    2710:	89 2f       	mov	r24, r25
    2712:	00 0c       	add	r0, r0
    2714:	88 1f       	adc	r24, r24
    2716:	99 0b       	sbc	r25, r25
    2718:	00 0c       	add	r0, r0
    271a:	88 1f       	adc	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	98 2f       	mov	r25, r24
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	65 e0       	ldi	r22, 0x05	; 5
    2724:	49 2f       	mov	r20, r25
    2726:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    272a:	fe 01       	movw	r30, r28
    272c:	ed 59       	subi	r30, 0x9D	; 157
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 81       	ld	r24, Z
    2732:	98 2f       	mov	r25, r24
    2734:	99 1f       	adc	r25, r25
    2736:	99 27       	eor	r25, r25
    2738:	99 1f       	adc	r25, r25
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	66 e0       	ldi	r22, 0x06	; 6
    273e:	49 2f       	mov	r20, r25
    2740:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2744:	fe 01       	movw	r30, r28
    2746:	ed 5b       	subi	r30, 0xBD	; 189
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	a0 e8       	ldi	r26, 0x80	; 128
    2750:	bf e3       	ldi	r27, 0x3F	; 63
    2752:	80 83       	st	Z, r24
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	a2 83       	std	Z+2, r26	; 0x02
    2758:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275a:	8e 01       	movw	r16, r28
    275c:	01 5c       	subi	r16, 0xC1	; 193
    275e:	1f 4f       	sbci	r17, 0xFF	; 255
    2760:	fe 01       	movw	r30, r28
    2762:	ed 5b       	subi	r30, 0xBD	; 189
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	60 81       	ld	r22, Z
    2768:	71 81       	ldd	r23, Z+1	; 0x01
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	4a e7       	ldi	r20, 0x7A	; 122
    2774:	55 e4       	ldi	r21, 0x45	; 69
    2776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	f8 01       	movw	r30, r16
    2780:	80 83       	st	Z, r24
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	a2 83       	std	Z+2, r26	; 0x02
    2786:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2788:	fe 01       	movw	r30, r28
    278a:	ff 96       	adiw	r30, 0x3f	; 63
    278c:	60 81       	ld	r22, Z
    278e:	71 81       	ldd	r23, Z+1	; 0x01
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	93 81       	ldd	r25, Z+3	; 0x03
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e8       	ldi	r20, 0x80	; 128
    279a:	5f e3       	ldi	r21, 0x3F	; 63
    279c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a0:	88 23       	and	r24, r24
    27a2:	2c f4       	brge	.+10     	; 0x27ae <LCD_displayCharacter+0x40e>
		__ticks = 1;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9e af       	std	Y+62, r25	; 0x3e
    27aa:	8d af       	std	Y+61, r24	; 0x3d
    27ac:	46 c0       	rjmp	.+140    	; 0x283a <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    27ae:	fe 01       	movw	r30, r28
    27b0:	ff 96       	adiw	r30, 0x3f	; 63
    27b2:	60 81       	ld	r22, Z
    27b4:	71 81       	ldd	r23, Z+1	; 0x01
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	3f ef       	ldi	r19, 0xFF	; 255
    27be:	4f e7       	ldi	r20, 0x7F	; 127
    27c0:	57 e4       	ldi	r21, 0x47	; 71
    27c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c6:	18 16       	cp	r1, r24
    27c8:	64 f5       	brge	.+88     	; 0x2822 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ca:	fe 01       	movw	r30, r28
    27cc:	ed 5b       	subi	r30, 0xBD	; 189
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	60 81       	ld	r22, Z
    27d2:	71 81       	ldd	r23, Z+1	; 0x01
    27d4:	82 81       	ldd	r24, Z+2	; 0x02
    27d6:	93 81       	ldd	r25, Z+3	; 0x03
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e2       	ldi	r20, 0x20	; 32
    27de:	51 e4       	ldi	r21, 0x41	; 65
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	bc 01       	movw	r22, r24
    27ea:	cd 01       	movw	r24, r26
    27ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	9e af       	std	Y+62, r25	; 0x3e
    27f6:	8d af       	std	Y+61, r24	; 0x3d
    27f8:	0f c0       	rjmp	.+30     	; 0x2818 <LCD_displayCharacter+0x478>
    27fa:	80 e9       	ldi	r24, 0x90	; 144
    27fc:	91 e0       	ldi	r25, 0x01	; 1
    27fe:	9c af       	std	Y+60, r25	; 0x3c
    2800:	8b af       	std	Y+59, r24	; 0x3b
    2802:	8b ad       	ldd	r24, Y+59	; 0x3b
    2804:	9c ad       	ldd	r25, Y+60	; 0x3c
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <LCD_displayCharacter+0x466>
    280a:	9c af       	std	Y+60, r25	; 0x3c
    280c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2810:	9e ad       	ldd	r25, Y+62	; 0x3e
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	9e af       	std	Y+62, r25	; 0x3e
    2816:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2818:	8d ad       	ldd	r24, Y+61	; 0x3d
    281a:	9e ad       	ldd	r25, Y+62	; 0x3e
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	69 f7       	brne	.-38     	; 0x27fa <LCD_displayCharacter+0x45a>
    2820:	16 c0       	rjmp	.+44     	; 0x284e <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2822:	fe 01       	movw	r30, r28
    2824:	ff 96       	adiw	r30, 0x3f	; 63
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9e af       	std	Y+62, r25	; 0x3e
    2838:	8d af       	std	Y+61, r24	; 0x3d
    283a:	8d ad       	ldd	r24, Y+61	; 0x3d
    283c:	9e ad       	ldd	r25, Y+62	; 0x3e
    283e:	9a af       	std	Y+58, r25	; 0x3a
    2840:	89 af       	std	Y+57, r24	; 0x39
    2842:	89 ad       	ldd	r24, Y+57	; 0x39
    2844:	9a ad       	ldd	r25, Y+58	; 0x3a
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_displayCharacter+0x4a6>
    284a:	9a af       	std	Y+58, r25	; 0x3a
    284c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	62 e0       	ldi	r22, 0x02	; 2
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a0 e8       	ldi	r26, 0x80	; 128
    285e:	bf e3       	ldi	r27, 0x3F	; 63
    2860:	8d ab       	std	Y+53, r24	; 0x35
    2862:	9e ab       	std	Y+54, r25	; 0x36
    2864:	af ab       	std	Y+55, r26	; 0x37
    2866:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	6d a9       	ldd	r22, Y+53	; 0x35
    286a:	7e a9       	ldd	r23, Y+54	; 0x36
    286c:	8f a9       	ldd	r24, Y+55	; 0x37
    286e:	98 ad       	ldd	r25, Y+56	; 0x38
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4a e7       	ldi	r20, 0x7A	; 122
    2876:	55 e4       	ldi	r21, 0x45	; 69
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	89 ab       	std	Y+49, r24	; 0x31
    2882:	9a ab       	std	Y+50, r25	; 0x32
    2884:	ab ab       	std	Y+51, r26	; 0x33
    2886:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2888:	69 a9       	ldd	r22, Y+49	; 0x31
    288a:	7a a9       	ldd	r23, Y+50	; 0x32
    288c:	8b a9       	ldd	r24, Y+51	; 0x33
    288e:	9c a9       	ldd	r25, Y+52	; 0x34
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    289c:	88 23       	and	r24, r24
    289e:	2c f4       	brge	.+10     	; 0x28aa <LCD_displayCharacter+0x50a>
		__ticks = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	98 ab       	std	Y+48, r25	; 0x30
    28a6:	8f a7       	std	Y+47, r24	; 0x2f
    28a8:	3f c0       	rjmp	.+126    	; 0x2928 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    28aa:	69 a9       	ldd	r22, Y+49	; 0x31
    28ac:	7a a9       	ldd	r23, Y+50	; 0x32
    28ae:	8b a9       	ldd	r24, Y+51	; 0x33
    28b0:	9c a9       	ldd	r25, Y+52	; 0x34
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	4c f5       	brge	.+82     	; 0x2914 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c2:	6d a9       	ldd	r22, Y+53	; 0x35
    28c4:	7e a9       	ldd	r23, Y+54	; 0x36
    28c6:	8f a9       	ldd	r24, Y+55	; 0x37
    28c8:	98 ad       	ldd	r25, Y+56	; 0x38
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	98 ab       	std	Y+48, r25	; 0x30
    28e8:	8f a7       	std	Y+47, r24	; 0x2f
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <LCD_displayCharacter+0x56a>
    28ec:	80 e9       	ldi	r24, 0x90	; 144
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	9e a7       	std	Y+46, r25	; 0x2e
    28f2:	8d a7       	std	Y+45, r24	; 0x2d
    28f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    28f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <LCD_displayCharacter+0x558>
    28fc:	9e a7       	std	Y+46, r25	; 0x2e
    28fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	8f a5       	ldd	r24, Y+47	; 0x2f
    2902:	98 a9       	ldd	r25, Y+48	; 0x30
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	98 ab       	std	Y+48, r25	; 0x30
    2908:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290a:	8f a5       	ldd	r24, Y+47	; 0x2f
    290c:	98 a9       	ldd	r25, Y+48	; 0x30
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	69 f7       	brne	.-38     	; 0x28ec <LCD_displayCharacter+0x54c>
    2912:	14 c0       	rjmp	.+40     	; 0x293c <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2914:	69 a9       	ldd	r22, Y+49	; 0x31
    2916:	7a a9       	ldd	r23, Y+50	; 0x32
    2918:	8b a9       	ldd	r24, Y+51	; 0x33
    291a:	9c a9       	ldd	r25, Y+52	; 0x34
    291c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	98 ab       	std	Y+48, r25	; 0x30
    2926:	8f a7       	std	Y+47, r24	; 0x2f
    2928:	8f a5       	ldd	r24, Y+47	; 0x2f
    292a:	98 a9       	ldd	r25, Y+48	; 0x30
    292c:	9c a7       	std	Y+44, r25	; 0x2c
    292e:	8b a7       	std	Y+43, r24	; 0x2b
    2930:	8b a5       	ldd	r24, Y+43	; 0x2b
    2932:	9c a5       	ldd	r25, Y+44	; 0x2c
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <LCD_displayCharacter+0x594>
    2938:	9c a7       	std	Y+44, r25	; 0x2c
    293a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	62 e0       	ldi	r22, 0x02	; 2
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	a0 e8       	ldi	r26, 0x80	; 128
    294c:	bf e3       	ldi	r27, 0x3F	; 63
    294e:	8f a3       	std	Y+39, r24	; 0x27
    2950:	98 a7       	std	Y+40, r25	; 0x28
    2952:	a9 a7       	std	Y+41, r26	; 0x29
    2954:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2956:	6f a1       	ldd	r22, Y+39	; 0x27
    2958:	78 a5       	ldd	r23, Y+40	; 0x28
    295a:	89 a5       	ldd	r24, Y+41	; 0x29
    295c:	9a a5       	ldd	r25, Y+42	; 0x2a
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4a e7       	ldi	r20, 0x7A	; 122
    2964:	55 e4       	ldi	r21, 0x45	; 69
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	8b a3       	std	Y+35, r24	; 0x23
    2970:	9c a3       	std	Y+36, r25	; 0x24
    2972:	ad a3       	std	Y+37, r26	; 0x25
    2974:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2976:	6b a1       	ldd	r22, Y+35	; 0x23
    2978:	7c a1       	ldd	r23, Y+36	; 0x24
    297a:	8d a1       	ldd	r24, Y+37	; 0x25
    297c:	9e a1       	ldd	r25, Y+38	; 0x26
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e8       	ldi	r20, 0x80	; 128
    2984:	5f e3       	ldi	r21, 0x3F	; 63
    2986:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    298a:	88 23       	and	r24, r24
    298c:	2c f4       	brge	.+10     	; 0x2998 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	9a a3       	std	Y+34, r25	; 0x22
    2994:	89 a3       	std	Y+33, r24	; 0x21
    2996:	3f c0       	rjmp	.+126    	; 0x2a16 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2998:	6b a1       	ldd	r22, Y+35	; 0x23
    299a:	7c a1       	ldd	r23, Y+36	; 0x24
    299c:	8d a1       	ldd	r24, Y+37	; 0x25
    299e:	9e a1       	ldd	r25, Y+38	; 0x26
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	3f ef       	ldi	r19, 0xFF	; 255
    29a4:	4f e7       	ldi	r20, 0x7F	; 127
    29a6:	57 e4       	ldi	r21, 0x47	; 71
    29a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ac:	18 16       	cp	r1, r24
    29ae:	4c f5       	brge	.+82     	; 0x2a02 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b0:	6f a1       	ldd	r22, Y+39	; 0x27
    29b2:	78 a5       	ldd	r23, Y+40	; 0x28
    29b4:	89 a5       	ldd	r24, Y+41	; 0x29
    29b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e2       	ldi	r20, 0x20	; 32
    29be:	51 e4       	ldi	r21, 0x41	; 65
    29c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	9a a3       	std	Y+34, r25	; 0x22
    29d6:	89 a3       	std	Y+33, r24	; 0x21
    29d8:	0f c0       	rjmp	.+30     	; 0x29f8 <LCD_displayCharacter+0x658>
    29da:	80 e9       	ldi	r24, 0x90	; 144
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	98 a3       	std	Y+32, r25	; 0x20
    29e0:	8f 8f       	std	Y+31, r24	; 0x1f
    29e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29e4:	98 a1       	ldd	r25, Y+32	; 0x20
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <LCD_displayCharacter+0x646>
    29ea:	98 a3       	std	Y+32, r25	; 0x20
    29ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ee:	89 a1       	ldd	r24, Y+33	; 0x21
    29f0:	9a a1       	ldd	r25, Y+34	; 0x22
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	9a a3       	std	Y+34, r25	; 0x22
    29f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f8:	89 a1       	ldd	r24, Y+33	; 0x21
    29fa:	9a a1       	ldd	r25, Y+34	; 0x22
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	69 f7       	brne	.-38     	; 0x29da <LCD_displayCharacter+0x63a>
    2a00:	14 c0       	rjmp	.+40     	; 0x2a2a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a02:	6b a1       	ldd	r22, Y+35	; 0x23
    2a04:	7c a1       	ldd	r23, Y+36	; 0x24
    2a06:	8d a1       	ldd	r24, Y+37	; 0x25
    2a08:	9e a1       	ldd	r25, Y+38	; 0x26
    2a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	9a a3       	std	Y+34, r25	; 0x22
    2a14:	89 a3       	std	Y+33, r24	; 0x21
    2a16:	89 a1       	ldd	r24, Y+33	; 0x21
    2a18:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a1c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <LCD_displayCharacter+0x682>
    2a26:	9e 8f       	std	Y+30, r25	; 0x1e
    2a28:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	ed 59       	subi	r30, 0x9D	; 157
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	80 81       	ld	r24, Z
    2a32:	98 2f       	mov	r25, r24
    2a34:	91 70       	andi	r25, 0x01	; 1
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	63 e0       	ldi	r22, 0x03	; 3
    2a3a:	49 2f       	mov	r20, r25
    2a3c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2a40:	fe 01       	movw	r30, r28
    2a42:	ed 59       	subi	r30, 0x9D	; 157
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 81       	ld	r24, Z
    2a48:	88 2f       	mov	r24, r24
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	82 70       	andi	r24, 0x02	; 2
    2a4e:	90 70       	andi	r25, 0x00	; 0
    2a50:	95 95       	asr	r25
    2a52:	87 95       	ror	r24
    2a54:	98 2f       	mov	r25, r24
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	64 e0       	ldi	r22, 0x04	; 4
    2a5a:	49 2f       	mov	r20, r25
    2a5c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2a60:	fe 01       	movw	r30, r28
    2a62:	ed 59       	subi	r30, 0x9D	; 157
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	80 81       	ld	r24, Z
    2a68:	88 2f       	mov	r24, r24
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	84 70       	andi	r24, 0x04	; 4
    2a6e:	90 70       	andi	r25, 0x00	; 0
    2a70:	95 95       	asr	r25
    2a72:	87 95       	ror	r24
    2a74:	95 95       	asr	r25
    2a76:	87 95       	ror	r24
    2a78:	98 2f       	mov	r25, r24
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	65 e0       	ldi	r22, 0x05	; 5
    2a7e:	49 2f       	mov	r20, r25
    2a80:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2a84:	fe 01       	movw	r30, r28
    2a86:	ed 59       	subi	r30, 0x9D	; 157
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	80 81       	ld	r24, Z
    2a8c:	88 2f       	mov	r24, r24
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	88 70       	andi	r24, 0x08	; 8
    2a92:	90 70       	andi	r25, 0x00	; 0
    2a94:	95 95       	asr	r25
    2a96:	87 95       	ror	r24
    2a98:	95 95       	asr	r25
    2a9a:	87 95       	ror	r24
    2a9c:	95 95       	asr	r25
    2a9e:	87 95       	ror	r24
    2aa0:	98 2f       	mov	r25, r24
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	66 e0       	ldi	r22, 0x06	; 6
    2aa6:	49 2f       	mov	r20, r25
    2aa8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	a0 e8       	ldi	r26, 0x80	; 128
    2ab2:	bf e3       	ldi	r27, 0x3F	; 63
    2ab4:	89 8f       	std	Y+25, r24	; 0x19
    2ab6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ab8:	ab 8f       	std	Y+27, r26	; 0x1b
    2aba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2abc:	69 8d       	ldd	r22, Y+25	; 0x19
    2abe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ac0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	4a e7       	ldi	r20, 0x7A	; 122
    2aca:	55 e4       	ldi	r21, 0x45	; 69
    2acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	8d 8b       	std	Y+21, r24	; 0x15
    2ad6:	9e 8b       	std	Y+22, r25	; 0x16
    2ad8:	af 8b       	std	Y+23, r26	; 0x17
    2ada:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2adc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ade:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e8       	ldi	r20, 0x80	; 128
    2aea:	5f e3       	ldi	r21, 0x3F	; 63
    2aec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2af0:	88 23       	and	r24, r24
    2af2:	2c f4       	brge	.+10     	; 0x2afe <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	9c 8b       	std	Y+20, r25	; 0x14
    2afa:	8b 8b       	std	Y+19, r24	; 0x13
    2afc:	3f c0       	rjmp	.+126    	; 0x2b7c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2afe:	6d 89       	ldd	r22, Y+21	; 0x15
    2b00:	7e 89       	ldd	r23, Y+22	; 0x16
    2b02:	8f 89       	ldd	r24, Y+23	; 0x17
    2b04:	98 8d       	ldd	r25, Y+24	; 0x18
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	3f ef       	ldi	r19, 0xFF	; 255
    2b0a:	4f e7       	ldi	r20, 0x7F	; 127
    2b0c:	57 e4       	ldi	r21, 0x47	; 71
    2b0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b12:	18 16       	cp	r1, r24
    2b14:	4c f5       	brge	.+82     	; 0x2b68 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b16:	69 8d       	ldd	r22, Y+25	; 0x19
    2b18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e2       	ldi	r20, 0x20	; 32
    2b24:	51 e4       	ldi	r21, 0x41	; 65
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9c 8b       	std	Y+20, r25	; 0x14
    2b3c:	8b 8b       	std	Y+19, r24	; 0x13
    2b3e:	0f c0       	rjmp	.+30     	; 0x2b5e <LCD_displayCharacter+0x7be>
    2b40:	80 e9       	ldi	r24, 0x90	; 144
    2b42:	91 e0       	ldi	r25, 0x01	; 1
    2b44:	9a 8b       	std	Y+18, r25	; 0x12
    2b46:	89 8b       	std	Y+17, r24	; 0x11
    2b48:	89 89       	ldd	r24, Y+17	; 0x11
    2b4a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <LCD_displayCharacter+0x7ac>
    2b50:	9a 8b       	std	Y+18, r25	; 0x12
    2b52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b54:	8b 89       	ldd	r24, Y+19	; 0x13
    2b56:	9c 89       	ldd	r25, Y+20	; 0x14
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	9c 8b       	std	Y+20, r25	; 0x14
    2b5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b60:	9c 89       	ldd	r25, Y+20	; 0x14
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	69 f7       	brne	.-38     	; 0x2b40 <LCD_displayCharacter+0x7a0>
    2b66:	14 c0       	rjmp	.+40     	; 0x2b90 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b68:	6d 89       	ldd	r22, Y+21	; 0x15
    2b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	9c 8b       	std	Y+20, r25	; 0x14
    2b7a:	8b 8b       	std	Y+19, r24	; 0x13
    2b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b80:	98 8b       	std	Y+16, r25	; 0x10
    2b82:	8f 87       	std	Y+15, r24	; 0x0f
    2b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b86:	98 89       	ldd	r25, Y+16	; 0x10
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <LCD_displayCharacter+0x7e8>
    2b8c:	98 8b       	std	Y+16, r25	; 0x10
    2b8e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	62 e0       	ldi	r22, 0x02	; 2
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	a0 e8       	ldi	r26, 0x80	; 128
    2ba0:	bf e3       	ldi	r27, 0x3F	; 63
    2ba2:	8b 87       	std	Y+11, r24	; 0x0b
    2ba4:	9c 87       	std	Y+12, r25	; 0x0c
    2ba6:	ad 87       	std	Y+13, r26	; 0x0d
    2ba8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	4a e7       	ldi	r20, 0x7A	; 122
    2bb8:	55 e4       	ldi	r21, 0x45	; 69
    2bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	8f 83       	std	Y+7, r24	; 0x07
    2bc4:	98 87       	std	Y+8, r25	; 0x08
    2bc6:	a9 87       	std	Y+9, r26	; 0x09
    2bc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bca:	6f 81       	ldd	r22, Y+7	; 0x07
    2bcc:	78 85       	ldd	r23, Y+8	; 0x08
    2bce:	89 85       	ldd	r24, Y+9	; 0x09
    2bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e8       	ldi	r20, 0x80	; 128
    2bd8:	5f e3       	ldi	r21, 0x3F	; 63
    2bda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bde:	88 23       	and	r24, r24
    2be0:	2c f4       	brge	.+10     	; 0x2bec <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	9e 83       	std	Y+6, r25	; 0x06
    2be8:	8d 83       	std	Y+5, r24	; 0x05
    2bea:	3f c0       	rjmp	.+126    	; 0x2c6a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2bec:	6f 81       	ldd	r22, Y+7	; 0x07
    2bee:	78 85       	ldd	r23, Y+8	; 0x08
    2bf0:	89 85       	ldd	r24, Y+9	; 0x09
    2bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	3f ef       	ldi	r19, 0xFF	; 255
    2bf8:	4f e7       	ldi	r20, 0x7F	; 127
    2bfa:	57 e4       	ldi	r21, 0x47	; 71
    2bfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c00:	18 16       	cp	r1, r24
    2c02:	4c f5       	brge	.+82     	; 0x2c56 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e2       	ldi	r20, 0x20	; 32
    2c12:	51 e4       	ldi	r21, 0x41	; 65
    2c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	bc 01       	movw	r22, r24
    2c1e:	cd 01       	movw	r24, r26
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
    2c2c:	0f c0       	rjmp	.+30     	; 0x2c4c <LCD_displayCharacter+0x8ac>
    2c2e:	80 e9       	ldi	r24, 0x90	; 144
    2c30:	91 e0       	ldi	r25, 0x01	; 1
    2c32:	9c 83       	std	Y+4, r25	; 0x04
    2c34:	8b 83       	std	Y+3, r24	; 0x03
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <LCD_displayCharacter+0x89a>
    2c3e:	9c 83       	std	Y+4, r25	; 0x04
    2c40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c42:	8d 81       	ldd	r24, Y+5	; 0x05
    2c44:	9e 81       	ldd	r25, Y+6	; 0x06
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	9e 83       	std	Y+6, r25	; 0x06
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	69 f7       	brne	.-38     	; 0x2c2e <LCD_displayCharacter+0x88e>
    2c54:	14 c0       	rjmp	.+40     	; 0x2c7e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c56:	6f 81       	ldd	r22, Y+7	; 0x07
    2c58:	78 85       	ldd	r23, Y+8	; 0x08
    2c5a:	89 85       	ldd	r24, Y+9	; 0x09
    2c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	9e 83       	std	Y+6, r25	; 0x06
    2c68:	8d 83       	std	Y+5, r24	; 0x05
    2c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6e:	9a 83       	std	Y+2, r25	; 0x02
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	9a 81       	ldd	r25, Y+2	; 0x02
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <LCD_displayCharacter+0x8d6>
    2c7a:	9a 83       	std	Y+2, r25	; 0x02
    2c7c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2c7e:	cd 59       	subi	r28, 0x9D	; 157
    2c80:	df 4f       	sbci	r29, 0xFF	; 255
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	de bf       	out	0x3e, r29	; 62
    2c88:	0f be       	out	0x3f, r0	; 63
    2c8a:	cd bf       	out	0x3d, r28	; 61
    2c8c:	cf 91       	pop	r28
    2c8e:	df 91       	pop	r29
    2c90:	1f 91       	pop	r17
    2c92:	0f 91       	pop	r16
    2c94:	08 95       	ret

00002c96 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2c96:	df 93       	push	r29
    2c98:	cf 93       	push	r28
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <LCD_displayString+0x6>
    2c9c:	0f 92       	push	r0
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	9b 83       	std	Y+3, r25	; 0x03
    2ca4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ca6:	19 82       	std	Y+1, r1	; 0x01
    2ca8:	0e c0       	rjmp	.+28     	; 0x2cc6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	e2 0f       	add	r30, r18
    2cb8:	f3 1f       	adc	r31, r19
    2cba:	80 81       	ld	r24, Z
    2cbc:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_displayCharacter>
		i++;
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	8f 5f       	subi	r24, 0xFF	; 255
    2cc4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	28 2f       	mov	r18, r24
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	e2 0f       	add	r30, r18
    2cd4:	f3 1f       	adc	r31, r19
    2cd6:	80 81       	ld	r24, Z
    2cd8:	88 23       	and	r24, r24
    2cda:	39 f7       	brne	.-50     	; 0x2caa <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	08 95       	ret

00002ce8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <LCD_moveCursor+0x6>
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <LCD_moveCursor+0x8>
    2cf0:	0f 92       	push	r0
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	8a 83       	std	Y+2, r24	; 0x02
    2cf8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	3d 83       	std	Y+5, r19	; 0x05
    2d02:	2c 83       	std	Y+4, r18	; 0x04
    2d04:	8c 81       	ldd	r24, Y+4	; 0x04
    2d06:	9d 81       	ldd	r25, Y+5	; 0x05
    2d08:	81 30       	cpi	r24, 0x01	; 1
    2d0a:	91 05       	cpc	r25, r1
    2d0c:	c1 f0       	breq	.+48     	; 0x2d3e <LCD_moveCursor+0x56>
    2d0e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d10:	3d 81       	ldd	r19, Y+5	; 0x05
    2d12:	22 30       	cpi	r18, 0x02	; 2
    2d14:	31 05       	cpc	r19, r1
    2d16:	2c f4       	brge	.+10     	; 0x2d22 <LCD_moveCursor+0x3a>
    2d18:	8c 81       	ldd	r24, Y+4	; 0x04
    2d1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	61 f0       	breq	.+24     	; 0x2d38 <LCD_moveCursor+0x50>
    2d20:	19 c0       	rjmp	.+50     	; 0x2d54 <LCD_moveCursor+0x6c>
    2d22:	2c 81       	ldd	r18, Y+4	; 0x04
    2d24:	3d 81       	ldd	r19, Y+5	; 0x05
    2d26:	22 30       	cpi	r18, 0x02	; 2
    2d28:	31 05       	cpc	r19, r1
    2d2a:	69 f0       	breq	.+26     	; 0x2d46 <LCD_moveCursor+0x5e>
    2d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d30:	83 30       	cpi	r24, 0x03	; 3
    2d32:	91 05       	cpc	r25, r1
    2d34:	61 f0       	breq	.+24     	; 0x2d4e <LCD_moveCursor+0x66>
    2d36:	0e c0       	rjmp	.+28     	; 0x2d54 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	89 83       	std	Y+1, r24	; 0x01
    2d3c:	0b c0       	rjmp	.+22     	; 0x2d54 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	80 5c       	subi	r24, 0xC0	; 192
    2d42:	89 83       	std	Y+1, r24	; 0x01
    2d44:	07 c0       	rjmp	.+14     	; 0x2d54 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	80 5f       	subi	r24, 0xF0	; 240
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    2d4c:	03 c0       	rjmp	.+6      	; 0x2d54 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	80 5b       	subi	r24, 0xB0	; 176
    2d52:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	80 68       	ori	r24, 0x80	; 128
    2d58:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_sendCommand>
}
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <LCD_displayStringRowColumn+0x6>
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <LCD_displayStringRowColumn+0x8>
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	89 83       	std	Y+1, r24	; 0x01
    2d7a:	6a 83       	std	Y+2, r22	; 0x02
    2d7c:	5c 83       	std	Y+4, r21	; 0x04
    2d7e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	6a 81       	ldd	r22, Y+2	; 0x02
    2d84:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
}
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	62 97       	sbiw	r28, 0x12	; 18
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	9a 8b       	std	Y+18, r25	; 0x12
    2db4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2db6:	89 89       	ldd	r24, Y+17	; 0x11
    2db8:	9a 89       	ldd	r25, Y+18	; 0x12
    2dba:	9e 01       	movw	r18, r28
    2dbc:	2f 5f       	subi	r18, 0xFF	; 255
    2dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc0:	b9 01       	movw	r22, r18
    2dc2:	4a e0       	ldi	r20, 0x0A	; 10
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	0e 94 03 19 	call	0x3206	; 0x3206 <itoa>
   LCD_displayString(buff); /* Display the string */
    2dca:	ce 01       	movw	r24, r28
    2dcc:	01 96       	adiw	r24, 0x01	; 1
    2dce:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
}
    2dd2:	62 96       	adiw	r28, 0x12	; 18
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_sendCommand>
}
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <Buzzer_init>:
 */

#include"buzzer.h"

void Buzzer_init(void)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    2e00:	82 e0       	ldi	r24, 0x02	; 2
    2e02:	65 e0       	ldi	r22, 0x05	; 5
    2e04:	41 e0       	ldi	r20, 0x01	; 1
    2e06:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
}
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	08 95       	ret

00002e10 <Buzzer_on>:

void Buzzer_on(void)
{
    2e10:	df 93       	push	r29
    2e12:	cf 93       	push	r28
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	65 e0       	ldi	r22, 0x05	; 5
    2e1c:	41 e0       	ldi	r20, 0x01	; 1
    2e1e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <Buzzer_off>:

void Buzzer_off(void)
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    2e30:	82 e0       	ldi	r24, 0x02	; 2
    2e32:	65 e0       	ldi	r22, 0x05	; 5
    2e34:	40 e0       	ldi	r20, 0x00	; 0
    2e36:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <main>:
#include "../HAL/BUZZER/buzzer.h"
#include "../HAL/LED/led.h"
#include "../HAL/ULTRASONIC/ultrasonic.h"
#include "util/delay.h"
int main()
{
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    2e48:	6d 97       	sbiw	r28, 0x1d	; 29
    2e4a:	0f b6       	in	r0, 0x3f	; 63
    2e4c:	f8 94       	cli
    2e4e:	de bf       	out	0x3e, r29	; 62
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	cd bf       	out	0x3d, r28	; 61
	uint8 distance = 0;
    2e54:	1d 8e       	std	Y+29, r1	; 0x1d

	LCD_init();
    2e56:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_init>
	Ultrasonic_init();
    2e5a:	0e 94 38 0b 	call	0x1670	; 0x1670 <Ultrasonic_init>
	Buzzer_init();
    2e5e:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <Buzzer_init>
	LEDS_init();
    2e62:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LEDS_init>

	LCD_displayString("distance=   cm");
    2e66:	80 e6       	ldi	r24, 0x60	; 96
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>

	while(1)
	{
		distance = Ultrasonic_readDistance();
    2e6e:	0e 94 13 0c 	call	0x1826	; 0x1826 <Ultrasonic_readDistance>
    2e72:	8d 8f       	std	Y+29, r24	; 0x1d

		LCD_moveCursor(0,9);
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	69 e0       	ldi	r22, 0x09	; 9
    2e78:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
		LCD_intgerToString(distance);
    2e7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e7e:	88 2f       	mov	r24, r24
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_intgerToString>

		if(distance > 20)
    2e86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e88:	85 31       	cpi	r24, 0x15	; 21
    2e8a:	b8 f0       	brcs	.+46     	; 0x2eba <main+0x7a>
		{
			Buzzer_off();
    2e8c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <Buzzer_off>
			LED_OFF(red);
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	0e 94 82 0c 	call	0x1904	; 0x1904 <LED_OFF>
			LED_OFF(green);
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	0e 94 82 0c 	call	0x1904	; 0x1904 <LED_OFF>
			LED_OFF(blue);
    2e9c:	82 e0       	ldi	r24, 0x02	; 2
    2e9e:	0e 94 82 0c 	call	0x1904	; 0x1904 <LED_OFF>

			if(distance < 100)
    2ea2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ea4:	84 36       	cpi	r24, 0x64	; 100
    2ea6:	18 f7       	brcc	.-58     	; 0x2e6e <main+0x2e>
			{
				LCD_moveCursor(0,11);
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	6b e0       	ldi	r22, 0x0B	; 11
    2eac:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
				LCD_displayString(" ");
    2eb0:	8f e6       	ldi	r24, 0x6F	; 111
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
    2eb8:	da cf       	rjmp	.-76     	; 0x2e6e <main+0x2e>
			}

		}
		else if(distance <=20 && distance>=16)
    2eba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ebc:	85 31       	cpi	r24, 0x15	; 21
    2ebe:	b8 f4       	brcc	.+46     	; 0x2eee <main+0xae>
    2ec0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec2:	80 31       	cpi	r24, 0x10	; 16
    2ec4:	a0 f0       	brcs	.+40     	; 0x2eee <main+0xae>
		{
			Buzzer_off();
    2ec6:	0e 94 14 17 	call	0x2e28	; 0x2e28 <Buzzer_off>
			LED_ON(red);
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LED_ON>
			LED_OFF(green);
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	0e 94 82 0c 	call	0x1904	; 0x1904 <LED_OFF>
			LED_OFF(blue);
    2ed6:	82 e0       	ldi	r24, 0x02	; 2
    2ed8:	0e 94 82 0c 	call	0x1904	; 0x1904 <LED_OFF>

			LCD_moveCursor(0,11);
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	6b e0       	ldi	r22, 0x0B	; 11
    2ee0:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
			LCD_displayString(" ");
    2ee4:	8f e6       	ldi	r24, 0x6F	; 111
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
    2eec:	c0 cf       	rjmp	.-128    	; 0x2e6e <main+0x2e>

		}
		else if(distance <=15 && distance>=11)
    2eee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ef0:	80 31       	cpi	r24, 0x10	; 16
    2ef2:	b8 f4       	brcc	.+46     	; 0x2f22 <main+0xe2>
    2ef4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ef6:	8b 30       	cpi	r24, 0x0B	; 11
    2ef8:	a0 f0       	brcs	.+40     	; 0x2f22 <main+0xe2>
		{
			Buzzer_off();
    2efa:	0e 94 14 17 	call	0x2e28	; 0x2e28 <Buzzer_off>
			LED_ON(red);
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LED_ON>
			LED_ON(green);
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LED_ON>
			LED_OFF(blue);
    2f0a:	82 e0       	ldi	r24, 0x02	; 2
    2f0c:	0e 94 82 0c 	call	0x1904	; 0x1904 <LED_OFF>

			LCD_moveCursor(0,11);
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	6b e0       	ldi	r22, 0x0B	; 11
    2f14:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
			LCD_displayString(" ");
    2f18:	8f e6       	ldi	r24, 0x6F	; 111
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
    2f20:	a6 cf       	rjmp	.-180    	; 0x2e6e <main+0x2e>

		}
		else if(distance <=10 && distance>=6)
    2f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f24:	8b 30       	cpi	r24, 0x0B	; 11
    2f26:	50 f5       	brcc	.+84     	; 0x2f7c <main+0x13c>
    2f28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f2a:	86 30       	cpi	r24, 0x06	; 6
    2f2c:	38 f1       	brcs	.+78     	; 0x2f7c <main+0x13c>
		{
			Buzzer_off();
    2f2e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <Buzzer_off>
			LED_ON(red);
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LED_ON>
			LED_ON(green);
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LED_ON>
			LED_ON(blue);
    2f3e:	82 e0       	ldi	r24, 0x02	; 2
    2f40:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LED_ON>

			if(distance >= 10)
    2f44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f46:	8a 30       	cpi	r24, 0x0A	; 10
    2f48:	48 f0       	brcs	.+18     	; 0x2f5c <main+0x11c>
			{
				LCD_moveCursor(0,11);
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	6b e0       	ldi	r22, 0x0B	; 11
    2f4e:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
				LCD_displayString(" ");
    2f52:	8f e6       	ldi	r24, 0x6F	; 111
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
    2f5a:	89 cf       	rjmp	.-238    	; 0x2e6e <main+0x2e>
			}
			else
			{
				LCD_moveCursor(0,10);
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	6a e0       	ldi	r22, 0x0A	; 10
    2f60:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
				LCD_displayString("  ");
    2f64:	81 e7       	ldi	r24, 0x71	; 113
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
				LCD_displayStringRowColumn(1,0,"          ");/*to clear stop*/
    2f6c:	24 e7       	ldi	r18, 0x74	; 116
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	60 e0       	ldi	r22, 0x00	; 0
    2f74:	a9 01       	movw	r20, r18
    2f76:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>
    2f7a:	79 cf       	rjmp	.-270    	; 0x2e6e <main+0x2e>
			}
		}
		else if(distance <= 5)
    2f7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f7e:	86 30       	cpi	r24, 0x06	; 6
    2f80:	08 f0       	brcs	.+2      	; 0x2f84 <main+0x144>
    2f82:	75 cf       	rjmp	.-278    	; 0x2e6e <main+0x2e>
		{
			LCD_moveCursor(0,10);
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	6a e0       	ldi	r22, 0x0A	; 10
    2f88:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <LCD_moveCursor>
			LCD_displayString("  ");
    2f8c:	81 e7       	ldi	r24, 0x71	; 113
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <LCD_displayString>
			LCD_displayStringRowColumn(1,6,"STOP");
    2f94:	2f e7       	ldi	r18, 0x7F	; 127
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	66 e0       	ldi	r22, 0x06	; 6
    2f9c:	a9 01       	movw	r20, r18
    2f9e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <LCD_displayStringRowColumn>

			Buzzer_on();
    2fa2:	0e 94 08 17 	call	0x2e10	; 0x2e10 <Buzzer_on>
			LED_ON(red);
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LED_ON>
			LED_ON(green);
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LED_ON>
			LED_ON(blue);
    2fb2:	82 e0       	ldi	r24, 0x02	; 2
    2fb4:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <LED_ON>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	a6 e1       	ldi	r26, 0x16	; 22
    2fbe:	b3 e4       	ldi	r27, 0x43	; 67
    2fc0:	89 8f       	std	Y+25, r24	; 0x19
    2fc2:	9a 8f       	std	Y+26, r25	; 0x1a
    2fc4:	ab 8f       	std	Y+27, r26	; 0x1b
    2fc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc8:	69 8d       	ldd	r22, Y+25	; 0x19
    2fca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	4a e7       	ldi	r20, 0x7A	; 122
    2fd6:	55 e4       	ldi	r21, 0x45	; 69
    2fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	8d 8b       	std	Y+21, r24	; 0x15
    2fe2:	9e 8b       	std	Y+22, r25	; 0x16
    2fe4:	af 8b       	std	Y+23, r26	; 0x17
    2fe6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fe8:	6d 89       	ldd	r22, Y+21	; 0x15
    2fea:	7e 89       	ldd	r23, Y+22	; 0x16
    2fec:	8f 89       	ldd	r24, Y+23	; 0x17
    2fee:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	40 e8       	ldi	r20, 0x80	; 128
    2ff6:	5f e3       	ldi	r21, 0x3F	; 63
    2ff8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ffc:	88 23       	and	r24, r24
    2ffe:	2c f4       	brge	.+10     	; 0x300a <main+0x1ca>
		__ticks = 1;
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	9c 8b       	std	Y+20, r25	; 0x14
    3006:	8b 8b       	std	Y+19, r24	; 0x13
    3008:	3f c0       	rjmp	.+126    	; 0x3088 <main+0x248>
	else if (__tmp > 65535)
    300a:	6d 89       	ldd	r22, Y+21	; 0x15
    300c:	7e 89       	ldd	r23, Y+22	; 0x16
    300e:	8f 89       	ldd	r24, Y+23	; 0x17
    3010:	98 8d       	ldd	r25, Y+24	; 0x18
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	3f ef       	ldi	r19, 0xFF	; 255
    3016:	4f e7       	ldi	r20, 0x7F	; 127
    3018:	57 e4       	ldi	r21, 0x47	; 71
    301a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    301e:	18 16       	cp	r1, r24
    3020:	4c f5       	brge	.+82     	; 0x3074 <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3022:	69 8d       	ldd	r22, Y+25	; 0x19
    3024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 e2       	ldi	r20, 0x20	; 32
    3030:	51 e4       	ldi	r21, 0x41	; 65
    3032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	bc 01       	movw	r22, r24
    303c:	cd 01       	movw	r24, r26
    303e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	9c 8b       	std	Y+20, r25	; 0x14
    3048:	8b 8b       	std	Y+19, r24	; 0x13
    304a:	0f c0       	rjmp	.+30     	; 0x306a <main+0x22a>
    304c:	80 e9       	ldi	r24, 0x90	; 144
    304e:	91 e0       	ldi	r25, 0x01	; 1
    3050:	9a 8b       	std	Y+18, r25	; 0x12
    3052:	89 8b       	std	Y+17, r24	; 0x11
    3054:	89 89       	ldd	r24, Y+17	; 0x11
    3056:	9a 89       	ldd	r25, Y+18	; 0x12
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <main+0x218>
    305c:	9a 8b       	std	Y+18, r25	; 0x12
    305e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3060:	8b 89       	ldd	r24, Y+19	; 0x13
    3062:	9c 89       	ldd	r25, Y+20	; 0x14
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	9c 8b       	std	Y+20, r25	; 0x14
    3068:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306a:	8b 89       	ldd	r24, Y+19	; 0x13
    306c:	9c 89       	ldd	r25, Y+20	; 0x14
    306e:	00 97       	sbiw	r24, 0x00	; 0
    3070:	69 f7       	brne	.-38     	; 0x304c <main+0x20c>
    3072:	14 c0       	rjmp	.+40     	; 0x309c <main+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3074:	6d 89       	ldd	r22, Y+21	; 0x15
    3076:	7e 89       	ldd	r23, Y+22	; 0x16
    3078:	8f 89       	ldd	r24, Y+23	; 0x17
    307a:	98 8d       	ldd	r25, Y+24	; 0x18
    307c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	9c 8b       	std	Y+20, r25	; 0x14
    3086:	8b 8b       	std	Y+19, r24	; 0x13
    3088:	8b 89       	ldd	r24, Y+19	; 0x13
    308a:	9c 89       	ldd	r25, Y+20	; 0x14
    308c:	98 8b       	std	Y+16, r25	; 0x10
    308e:	8f 87       	std	Y+15, r24	; 0x0f
    3090:	8f 85       	ldd	r24, Y+15	; 0x0f
    3092:	98 89       	ldd	r25, Y+16	; 0x10
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	f1 f7       	brne	.-4      	; 0x3094 <main+0x254>
    3098:	98 8b       	std	Y+16, r25	; 0x10
    309a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(150);
			LED_OFF(red);
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	0e 94 82 0c 	call	0x1904	; 0x1904 <LED_OFF>
			LED_OFF(green);
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	0e 94 82 0c 	call	0x1904	; 0x1904 <LED_OFF>
			LED_OFF(blue);
    30a8:	82 e0       	ldi	r24, 0x02	; 2
    30aa:	0e 94 82 0c 	call	0x1904	; 0x1904 <LED_OFF>
			Buzzer_off();
    30ae:	0e 94 14 17 	call	0x2e28	; 0x2e28 <Buzzer_off>
    30b2:	80 e0       	ldi	r24, 0x00	; 0
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	a6 e1       	ldi	r26, 0x16	; 22
    30b8:	b3 e4       	ldi	r27, 0x43	; 67
    30ba:	8b 87       	std	Y+11, r24	; 0x0b
    30bc:	9c 87       	std	Y+12, r25	; 0x0c
    30be:	ad 87       	std	Y+13, r26	; 0x0d
    30c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	4a e7       	ldi	r20, 0x7A	; 122
    30d0:	55 e4       	ldi	r21, 0x45	; 69
    30d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	8f 83       	std	Y+7, r24	; 0x07
    30dc:	98 87       	std	Y+8, r25	; 0x08
    30de:	a9 87       	std	Y+9, r26	; 0x09
    30e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30e2:	6f 81       	ldd	r22, Y+7	; 0x07
    30e4:	78 85       	ldd	r23, Y+8	; 0x08
    30e6:	89 85       	ldd	r24, Y+9	; 0x09
    30e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e8       	ldi	r20, 0x80	; 128
    30f0:	5f e3       	ldi	r21, 0x3F	; 63
    30f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f6:	88 23       	and	r24, r24
    30f8:	2c f4       	brge	.+10     	; 0x3104 <main+0x2c4>
		__ticks = 1;
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	9e 83       	std	Y+6, r25	; 0x06
    3100:	8d 83       	std	Y+5, r24	; 0x05
    3102:	3f c0       	rjmp	.+126    	; 0x3182 <main+0x342>
	else if (__tmp > 65535)
    3104:	6f 81       	ldd	r22, Y+7	; 0x07
    3106:	78 85       	ldd	r23, Y+8	; 0x08
    3108:	89 85       	ldd	r24, Y+9	; 0x09
    310a:	9a 85       	ldd	r25, Y+10	; 0x0a
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	3f ef       	ldi	r19, 0xFF	; 255
    3110:	4f e7       	ldi	r20, 0x7F	; 127
    3112:	57 e4       	ldi	r21, 0x47	; 71
    3114:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3118:	18 16       	cp	r1, r24
    311a:	4c f5       	brge	.+82     	; 0x316e <main+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311c:	6b 85       	ldd	r22, Y+11	; 0x0b
    311e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3120:	8d 85       	ldd	r24, Y+13	; 0x0d
    3122:	9e 85       	ldd	r25, Y+14	; 0x0e
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e2       	ldi	r20, 0x20	; 32
    312a:	51 e4       	ldi	r21, 0x41	; 65
    312c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	bc 01       	movw	r22, r24
    3136:	cd 01       	movw	r24, r26
    3138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	9e 83       	std	Y+6, r25	; 0x06
    3142:	8d 83       	std	Y+5, r24	; 0x05
    3144:	0f c0       	rjmp	.+30     	; 0x3164 <main+0x324>
    3146:	80 e9       	ldi	r24, 0x90	; 144
    3148:	91 e0       	ldi	r25, 0x01	; 1
    314a:	9c 83       	std	Y+4, r25	; 0x04
    314c:	8b 83       	std	Y+3, r24	; 0x03
    314e:	8b 81       	ldd	r24, Y+3	; 0x03
    3150:	9c 81       	ldd	r25, Y+4	; 0x04
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	f1 f7       	brne	.-4      	; 0x3152 <main+0x312>
    3156:	9c 83       	std	Y+4, r25	; 0x04
    3158:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315a:	8d 81       	ldd	r24, Y+5	; 0x05
    315c:	9e 81       	ldd	r25, Y+6	; 0x06
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	9e 83       	std	Y+6, r25	; 0x06
    3162:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3164:	8d 81       	ldd	r24, Y+5	; 0x05
    3166:	9e 81       	ldd	r25, Y+6	; 0x06
    3168:	00 97       	sbiw	r24, 0x00	; 0
    316a:	69 f7       	brne	.-38     	; 0x3146 <main+0x306>
    316c:	80 ce       	rjmp	.-768    	; 0x2e6e <main+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316e:	6f 81       	ldd	r22, Y+7	; 0x07
    3170:	78 85       	ldd	r23, Y+8	; 0x08
    3172:	89 85       	ldd	r24, Y+9	; 0x09
    3174:	9a 85       	ldd	r25, Y+10	; 0x0a
    3176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	9e 83       	std	Y+6, r25	; 0x06
    3180:	8d 83       	std	Y+5, r24	; 0x05
    3182:	8d 81       	ldd	r24, Y+5	; 0x05
    3184:	9e 81       	ldd	r25, Y+6	; 0x06
    3186:	9a 83       	std	Y+2, r25	; 0x02
    3188:	89 83       	std	Y+1, r24	; 0x01
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	9a 81       	ldd	r25, Y+2	; 0x02
    318e:	01 97       	sbiw	r24, 0x01	; 1
    3190:	f1 f7       	brne	.-4      	; 0x318e <main+0x34e>
    3192:	9a 83       	std	Y+2, r25	; 0x02
    3194:	89 83       	std	Y+1, r24	; 0x01
    3196:	6b ce       	rjmp	.-810    	; 0x2e6e <main+0x2e>

00003198 <__prologue_saves__>:
    3198:	2f 92       	push	r2
    319a:	3f 92       	push	r3
    319c:	4f 92       	push	r4
    319e:	5f 92       	push	r5
    31a0:	6f 92       	push	r6
    31a2:	7f 92       	push	r7
    31a4:	8f 92       	push	r8
    31a6:	9f 92       	push	r9
    31a8:	af 92       	push	r10
    31aa:	bf 92       	push	r11
    31ac:	cf 92       	push	r12
    31ae:	df 92       	push	r13
    31b0:	ef 92       	push	r14
    31b2:	ff 92       	push	r15
    31b4:	0f 93       	push	r16
    31b6:	1f 93       	push	r17
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	ca 1b       	sub	r28, r26
    31c2:	db 0b       	sbc	r29, r27
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	09 94       	ijmp

000031d0 <__epilogue_restores__>:
    31d0:	2a 88       	ldd	r2, Y+18	; 0x12
    31d2:	39 88       	ldd	r3, Y+17	; 0x11
    31d4:	48 88       	ldd	r4, Y+16	; 0x10
    31d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    31d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    31da:	7d 84       	ldd	r7, Y+13	; 0x0d
    31dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    31de:	9b 84       	ldd	r9, Y+11	; 0x0b
    31e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    31e2:	b9 84       	ldd	r11, Y+9	; 0x09
    31e4:	c8 84       	ldd	r12, Y+8	; 0x08
    31e6:	df 80       	ldd	r13, Y+7	; 0x07
    31e8:	ee 80       	ldd	r14, Y+6	; 0x06
    31ea:	fd 80       	ldd	r15, Y+5	; 0x05
    31ec:	0c 81       	ldd	r16, Y+4	; 0x04
    31ee:	1b 81       	ldd	r17, Y+3	; 0x03
    31f0:	aa 81       	ldd	r26, Y+2	; 0x02
    31f2:	b9 81       	ldd	r27, Y+1	; 0x01
    31f4:	ce 0f       	add	r28, r30
    31f6:	d1 1d       	adc	r29, r1
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	ed 01       	movw	r28, r26
    3204:	08 95       	ret

00003206 <itoa>:
    3206:	fb 01       	movw	r30, r22
    3208:	9f 01       	movw	r18, r30
    320a:	e8 94       	clt
    320c:	42 30       	cpi	r20, 0x02	; 2
    320e:	c4 f0       	brlt	.+48     	; 0x3240 <itoa+0x3a>
    3210:	45 32       	cpi	r20, 0x25	; 37
    3212:	b4 f4       	brge	.+44     	; 0x3240 <itoa+0x3a>
    3214:	4a 30       	cpi	r20, 0x0A	; 10
    3216:	29 f4       	brne	.+10     	; 0x3222 <itoa+0x1c>
    3218:	97 fb       	bst	r25, 7
    321a:	1e f4       	brtc	.+6      	; 0x3222 <itoa+0x1c>
    321c:	90 95       	com	r25
    321e:	81 95       	neg	r24
    3220:	9f 4f       	sbci	r25, 0xFF	; 255
    3222:	64 2f       	mov	r22, r20
    3224:	77 27       	eor	r23, r23
    3226:	0e 94 34 19 	call	0x3268	; 0x3268 <__udivmodhi4>
    322a:	80 5d       	subi	r24, 0xD0	; 208
    322c:	8a 33       	cpi	r24, 0x3A	; 58
    322e:	0c f0       	brlt	.+2      	; 0x3232 <itoa+0x2c>
    3230:	89 5d       	subi	r24, 0xD9	; 217
    3232:	81 93       	st	Z+, r24
    3234:	cb 01       	movw	r24, r22
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	a1 f7       	brne	.-24     	; 0x3222 <itoa+0x1c>
    323a:	16 f4       	brtc	.+4      	; 0x3240 <itoa+0x3a>
    323c:	5d e2       	ldi	r21, 0x2D	; 45
    323e:	51 93       	st	Z+, r21
    3240:	10 82       	st	Z, r1
    3242:	c9 01       	movw	r24, r18
    3244:	0c 94 24 19 	jmp	0x3248	; 0x3248 <strrev>

00003248 <strrev>:
    3248:	dc 01       	movw	r26, r24
    324a:	fc 01       	movw	r30, r24
    324c:	67 2f       	mov	r22, r23
    324e:	71 91       	ld	r23, Z+
    3250:	77 23       	and	r23, r23
    3252:	e1 f7       	brne	.-8      	; 0x324c <strrev+0x4>
    3254:	32 97       	sbiw	r30, 0x02	; 2
    3256:	04 c0       	rjmp	.+8      	; 0x3260 <strrev+0x18>
    3258:	7c 91       	ld	r23, X
    325a:	6d 93       	st	X+, r22
    325c:	70 83       	st	Z, r23
    325e:	62 91       	ld	r22, -Z
    3260:	ae 17       	cp	r26, r30
    3262:	bf 07       	cpc	r27, r31
    3264:	c8 f3       	brcs	.-14     	; 0x3258 <strrev+0x10>
    3266:	08 95       	ret

00003268 <__udivmodhi4>:
    3268:	aa 1b       	sub	r26, r26
    326a:	bb 1b       	sub	r27, r27
    326c:	51 e1       	ldi	r21, 0x11	; 17
    326e:	07 c0       	rjmp	.+14     	; 0x327e <__udivmodhi4_ep>

00003270 <__udivmodhi4_loop>:
    3270:	aa 1f       	adc	r26, r26
    3272:	bb 1f       	adc	r27, r27
    3274:	a6 17       	cp	r26, r22
    3276:	b7 07       	cpc	r27, r23
    3278:	10 f0       	brcs	.+4      	; 0x327e <__udivmodhi4_ep>
    327a:	a6 1b       	sub	r26, r22
    327c:	b7 0b       	sbc	r27, r23

0000327e <__udivmodhi4_ep>:
    327e:	88 1f       	adc	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	5a 95       	dec	r21
    3284:	a9 f7       	brne	.-22     	; 0x3270 <__udivmodhi4_loop>
    3286:	80 95       	com	r24
    3288:	90 95       	com	r25
    328a:	bc 01       	movw	r22, r24
    328c:	cd 01       	movw	r24, r26
    328e:	08 95       	ret

00003290 <_exit>:
    3290:	f8 94       	cli

00003292 <__stop_program>:
    3292:	ff cf       	rjmp	.-2      	; 0x3292 <__stop_program>
